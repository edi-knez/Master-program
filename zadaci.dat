===================================================
TEKST ZADATKA: <summary>
Ispisi i izracunaj x, x^2, x^4
</summary>
DEKLARACIJA: void Cjelina1::zad4_kvadrat()
KOD:
{
	using std::cout;
	double x = 5.5;
	double x2 = _kvadPovrsina( x );		// kvadriraj x		da dobijes x^2
	double x4 = _kvadPovrsina( x2 );	// kvadriraj x^2	da dobijes x^4
	cout << "x: " << x << '\n';
	cout << "x2: " << x2 << '\n';
	cout << "x4: " << x4 << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina1::zad5_ispis()
KOD:
{
	using std::cout;
	cout << "\nI like to write \n before I've read it. \n\n";
	cout << "Then, with my pen, I always edit.\n";
	cout << "But, with computer\s, now I type ";
	cout << "and never, ever get it right.\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina1::vj1_2datoteke()
KOD:
{
	std::cout << "Ovo je moj C++ program\n";
	z121_datoteka();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina1::vj3_krug()
KOD:
{
	double r, kvadrat, area;
	r = 2;
	kvadrat = r * r;
	area = kvadrat * 3.14;
	std::cout << "Povrsina kruga = " << area << " m" << std::endl;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina10::zad1()
KOD:
{
    /*   LP* a = new LP;
   CD* b = new CD;
   DVD* c = new DVD;

   a->ispis();
   b->ispis();
   c->ispis();

   delete a, b, c;*/

    LP* a = new LP;
    CD* b = new CD;
    DVD* c = new DVD;
    Ploca* A[3];

    A[0] = a;
    A[1] = b;
    A[2] = c;

    for (int i = 0; i < 3; i++) {
        A[i]->_ispisi();
    }

    delete A[0], A[1], A[2];
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina10::zad2()
KOD:
{
    Roditelj* a = new Roditelj("Janko", 1);
    Dijete* b = new Dijete("Ana", true);
    Clan_obitelji* c[2];

    c[0] = a;
    c[1] = b;

    for (int i = 0; i < 2; i++)  c[i]->_ispis();

    for (int i = 0; i < 2; i++)  delete c[i];

}
--------------------------------
TEKST ZADATKA: <summary>
ispisi integer
</summary>
<param name="lr">integer koji zelis ispisat</param>
DEKLARACIJA: void Cjelina2::ispis(int lr)
KOD:
{ std::cout << "(int funkcija): " << lr << '\n'; }
--------------------------------
TEKST ZADATKA: <summary>
Ispisi double
</summary>
<param name="lrDouble">double koji zelis ispisat</param>
DEKLARACIJA: void Cjelina2::ispis(double lrDouble)
KOD:
{ std::cout << "(double funkcija): " << lrDouble << '\n'; }
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina2::Krug::operator=(double x)
KOD:
{ this->m_radijus = x; }
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina2::zad1()
KOD:
{
    int r;
    double rDouble;

    r = 2;
    rDouble = 2.7;

    ispis(r);
    ispis(rDouble);
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina2::zad2()
KOD:
{
    Krug k;
    Krug* k2 = new Krug;
    double d;

    d = 1.3;
    k.SetRadijus(d);
    k = d;

    std::cout << "Radijus kruga: " << k.getRadijus() << '\n';
    delete k2;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina2::zad3()
KOD:
{
    using std::cout;
    Krug k1;
    Krug k2;
    double d;
    Krug k3;
    //k3.radijus = 2;
    k3.SetRadijus(2);
    Krug k4;
    //k4.radijus = -2;
    k4.SetRadijus(-2);
    cout << "Upisite radijus prvog kruga: ";
    std::cin >> d;
    //k1.radijus = d;
    k1.SetRadijus(d);
    cout << "Upisi radijus drugog kruga: ";
    std::cin >> d;
    //k2.radijus = d;
    k2.SetRadijus(d);

    cout << "Povrsina prvog kruga: " << k1.Povrsina() << std::endl;
    cout << "Povrsina drugog kruga " << k2.Povrsina() << std::endl;
    cout << "Povrsina 3. kruga: " << k3.Povrsina() << std::endl;
    cout << "Povrsina 4. kruga " << k4.Povrsina() << std::endl;

}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina2::zad4()
KOD:
{
    using std::cout;
    Krug k1;
    double d;
    cout << "Upisi radijus kruga: ";
    std::cin >> d;
    k1.SetRadijus(d);
    cout << "Radijus kruga je:\t" << k1.getRadijus() << std::endl;
    cout << "Povrsina kruga je:\t" << k1.Povrsina() << std::endl;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina2::zad5()
KOD:
{
    Razlomak raz;
    int br, nz;
    std::cout << "Upisi Brojnik pa nazivnik: ";
    std::cin >> br >> nz;

    if (raz.Set(br, nz))
        std::cout << "Vrijednost razlomka je: " << raz.GetDecimal() << '\n';
    
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina2::zad6()
KOD:
{
    std::string naziv = "Objektno orijentirano programiranje";
    std::string noviStr;
    std::cin >> noviStr;
    std::cout << '\n' << naziv << '\n';
    naziv = noviStr;
    std::cout << naziv << '\n';

    std::cout << "duljina stringa je: " << naziv.length() << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina3::zad1()
KOD:
{
	double rad, pPov, refPov;
	double povrsina, opseg;

	std::cout << "Upisi radijus kruga: ";
	std::cin >> rad;

	std::cout << "Povrsina kruga = " << povrsinaVrijednost( rad ) << " m2\n";

	povrsinaPokazivac( rad, &pPov );
	std::cout << "Povrsina kruga (pok)= " << pPov << " m2\n";

	povrsinaReferenca( rad, refPov );
	std::cout << "Povrsina kruga (ref)= " << refPov << " m2\n";

	povrsinaOpseg( povrsina, opseg, rad );
	std::cout << "Radijus: " << rad << "\nPovrsina = " << povrsina << " m2\n" << "Opseg = " << opseg << " m2\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina3::zad3()
KOD:
{
	float width = 2.5, height = 3.1, area = 0.0;
	rect_area( width, height, area );
	std::cout << "Povrsina pravokutnika je= " << area << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina3::zad4()
KOD:
{
	using std::cin; using std::cout;
	uint32_t izbor = 0;
	float opseg;
	cout << "Upisi broj:\n1 - za opseg trokuta\n2 - za opseg kvadrata\n3 - za opseg kruga\n";
	cin >> izbor;
	switch( izbor )
	{
	case 1:
	{
		float str1, str2, str3;
		cout << "Unesi stranice trokuta: (str1 str2 str3): ";
		cin >> str1 >> str2 >> str3;
		trokut_Opseg( opseg, str1, str2, str3 );
		cout << "Opseg trokuta = " << opseg << '\n';
		break;
	}
	case 2:
	{
		float str;
		cout << "Unesi stranicu kvadrata: ";
		cin >> str;
		kvadrat_Opseg( opseg, str );
		cout << "Opseg kvadrata = " << opseg << '\n';
		break;
	}
	case 3:
	{
		float rad;
		cout << "Unesi radijus kruga: ";
		cin >> rad;
		krug_Opseg( &opseg, &rad );
		cout << "Opseg kruga = " << opseg;
		break;
	}
	default:
		cout << "Pogresan odabir!";
		break;
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina3::zad5()
KOD:
{
	Registracija r1( 534, 234 );
	Registracija r2;
	Registracija r3;
	r2.ispisi();
	r1.ispisi();
	r1.Set( 999, 544 );
	r1.ispisi();
	//r3.Set(1001, 1000);
}
--------------------------------
TEKST ZADATKA: <summary>
Racuna i ispisuje povrsinu pravokutnika. Rezultat se sprema u referencu larea parametar.
</summary>
<param name="lwidth">sirina stranice</param>
<param name="lheight">visina stranice</param>
<param name="larea">varijabla za rezultat</param>
DEKLARACIJA: void rect_area( float lwidth, float lheight, float& larea )
KOD:
{
	larea = lwidth * lheight;
	std::cout << "Povrsina funkcije je= " << larea << '\n';
}
--------------------------------
TEKST ZADATKA: <summary>
Racuna opseg trokuta
</summary>
<param name="o">varijabla za rezultat</param>
<param name="s1">stranica a</param>
<param name="s2">stranica b</param>
<param name="s3">stranica c</param>
DEKLARACIJA: void trokut_Opseg( float& o, const float& s1, const float& s2, const float& s3 )
KOD:
{
	o = s1 + s2 + s3;
}
--------------------------------
TEKST ZADATKA: <summary>
Racuna opseg kvadrata uz koristenje referenca
</summary>
<param name="o">varijabla za rezultat</param>
<param name="s"></param>
DEKLARACIJA: void kvadrat_Opseg( float& o, const float& s )
KOD:
{
	o = 4 * s;
}
--------------------------------
TEKST ZADATKA: <summary>
racuna opseg kruga uz koristenje pointera
</summary>
<param name="o">varijabla za rezultat</param>
<param name="s">radijus</param>
DEKLARACIJA: void krug_Opseg( float* o, const float* s )
KOD:
{
	*o = 2 * ( *s ) * 3.14;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina4::zad1()
KOD:
{
    Krug k(10);

    std::cout << "Povrsina: " << k.izracunajPovrsinu() << '\n';
    std::cout << "Opseg: " << k.izracunajOpseg() << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina4::zad3()
KOD:
{
        Tocka t1(1.0, 1.0);
        Tocka t2(4.0, 1.0);

        std::cout << "Udaljenost izmedu t1 i t2 = " << t1.Udaljenost(t2) << '\n';
        std::cout << "Udaljenost izmedu t2 i t1 = " << t2.Udaljenost(t1) << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina4::zad4()
KOD:
{
        Tocka2 t1;
        Tocka2 t2;
        t1.setTocka(1, 1);
        t2.setTocka(1, 4);

        std::cout << "Udaljenost izmedu t1 i t2 = " << Udaljenost(t1, t2) << '\n';
        std::cout << "Udaljenost izmedu t2 i t1 = " << Udaljenost(t2, t1) << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina4::zad5()
KOD:
{
    int i = 0, a = 2, b;

    while (i < 3) {
        std::cout << (i++ - a == (b = 0));
    }
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina5::zad2()
KOD:
{
	Krug* k = new Krug();
	if (k->SetRadijus(1.0))
	{
		std::cout << "Povrsina: " << k->izracunajPovrsinu() << '\n';
		std::cout << "Opseg: " << k->izracunajOpseg() << '\n';
	}
	else { std::cout << "Greska\n"; }
	if (k->SetRadijus(-1.0))
	{
		std::cout << "Povrsina: " << k->izracunajPovrsinu() << '\n';
		std::cout << "Opseg: " << k->izracunajOpseg() << '\n';
	}
	else { std::cout << "Greska pri unosu radijusa\n"; }

	delete k;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina5::zad3()
KOD:
{
	KlNiz kn1;

	for (int i = 0; i < 10; i++) {
		std::cout << "A[ " << i << "] = " << kn1[i] << '\n';
	}
	std::cout << "suma niza: " << kn1.sumaNiza() << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina6::zad1()
KOD:
{
    using std::cout;
    Kompleks a(6.6, 4.7);
    Kompleks b(2.6, 3.4);

    Kompleks c;

    cout << "a = " << a.getReal() << " + i * " << a.getImag() << '\n';
    cout << "b = " << b.getReal() << " + i * " << b.getImag() << '\n';

    c = a + b;

    cout << "c = a + b" << '\n';
    cout << "c = " << c.getReal() << " + i * " << c.getImag() << '\n';

    c = a - b;

    cout << "c = a - b" << '\n';
    cout << "c = " << c.getReal() << " + i * " << c.getImag() << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina6::zad2()
KOD:
{
    using std::cout; using std::cin;
    Kompleks a, b;

    cout << "Upisite 2 kompleksna broja (dva para vrijednosti): " << '\n';

    cin >> a;
    cin >> b;

    cout << "Upisali ste brojeve" << '\n';
    cout << "a = " << a.getReal() << " + i * " << a.getImag() << '\n';
    cout << "b = " << b.getReal() << " + i * " << b.getImag() << '\n';

    if (a < b) {
        cout << "a je manji od b!" << '\n';
    }
    else {
        cout << "a je veci ili jednak c!" << '\n';
    }

    Kompleks c;

    c = a;

    cout << "c = " << c.getReal() << " + i * " << c.getImag() << '\n';

    c.setReal(3.0);
    cout << "c = " << c.getReal() << " + i * " << c.getImag() << '\n';

    if (c > a) {
        cout << "c je veci od a!" << '\n';
    }
    else {
        cout << "c je manji ili jednak a!" << '\n';
    }

    c += a;
    cout << "c = " << c.getReal() << " + i * " << c.getImag() << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina6::zad3()
KOD:
{
    using std::cout;

    int arr[] = { 1, 2, 3, 4, 5 };
    int arr2[] = { 1, 2, 3, 4, 5, 6 };
    //iarray d;
    iarray i1{};
    iarray i2(arr, 5);
    iarray i3(i2);

    cout << "i1:\t" << i1.size() << '\n';
    cout << "i2:\t" << i2.size() << '\n';
    cout << "i3:\t" << i3.size() << '\n';

    i3 += 2;
    i2 += 5;
    cout << "i2:\t" << i2.size() << '\n';
    cout << "i3:\t" << i3.size() << '\n';

    i3 = iarray(arr2, 6);
    std::cout << "i3:\t" << i3.size() << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina6::zad4()
KOD:
{
    int i = 0;
    int p;
    double b, r;

    std::cout << "Upisi bazu: ";
    std::cin >> b;
    std::cout << "Upisi potenciju: ";
    std::cin >> p;

    r = rekurzija(p, b);

    std::cout << b << " na " << p << " je: " << r << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina7::zad1()
KOD:
{
	//// napravi datoteku i popuni je gradovima
	//std::ofstream out_file("cities.txt");

	//out_file << "Atlanta" << " " << "Baltimore";
	//out_file << " " << "Cincinnati" << " " << "Dallas";
	//out_file << " " << " " << "zzz" << " " << "zzz";

	//out_file.close();



	std::ifstream in_file("cities.txt", std::ios::in);
	std::ofstream filter("filter.txt", std::ios::out | std::ios::trunc);
	char c;
	std::string result = "";
	// dohvati karakter
	while (in_file.get(c))
	{
		// grad je spremljen u varijabli
		if (c == ' ')
		{
			if (result != "zzz" && result != "")	// ako se nalazi deliminator zzz ili je varijabla prazna, preskoci taj input
				filter << result << "\n";

			result = "";	// resetiraj string
			continue;
		}

		result += c;
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina7::zad2()
KOD:
{
    //kompleks a, b;
//std::cout << "Upisite 2 kompleksna broja (dva para vrijednosti): \n";
//std::cin >> a;
//std::cin >> b;

//std::cout << "Upisali ste brojeve\n";
//std::cout << a;
//std::cout << b;

//if (a < b)
//    std::cout << "a je manji od b!\n";
//else
//    std::cout << "a je veci od b!\n";

    Kompleks A[1000];
    int i;
    // izracunaj i zapisi u memoriju
    for (i = 0; i < 1000; ++i)
    {
        A[i].setReal(sqrt(static_cast<float>(i)));
        A[i].setImag(A[i].getReal());
    }

    // zapisi u datoteku iz memorije
    std::ofstream fTxt("kompleks.txt");
    for (i = 0; i < 1000; ++i)
        fTxt << A[i] << std::endl;
    fTxt.close();

    // zapisi u binarnom obliku
    std::ofstream fBin("kompleks.bin", std::ios::binary);
    fBin.write(reinterpret_cast<char*>(A), 1000 * sizeof(Kompleks));
    fBin.close();

    Kompleks B[1000];
    std::stringstream ss;
    std::ifstream bin_ulaz("kompleks.bin", std::ios::in | std::ios::binary);
    if (bin_ulaz)
    {
        // zapisi u memoriju iz binarne datoteke
        bin_ulaz.read(reinterpret_cast<char*>(&B), 1000 * sizeof(Kompleks));
        bin_ulaz.close();
        std::cout << "Citanje iz kompleks.bin:\n";
        for (i = 0; i < 1000; ++i)
            ss << B[i];
        std::cout << ss.view();
        std::cout << "\t\tEND\n";
    }
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina7::zad4()
KOD:
{
    std::ifstream datoteka("datoteka.txt", std::ios::in);
    //pisi_u_consolu_iz_datoteke(datoteka);
    pisi_u_consolu_iz_datoteke("datoteka", "dat");

}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void pisi_u_consolu_iz_datoteke(std::ifstream& datoteka)
KOD:

--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void pisi_u_consolu_iz_datoteke(const std::string& naziv, const std::string& ekstenzija)
KOD:

--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina8::zad1()
KOD:
{
	// C
	char ime[50] = "Ivan";
	char prezime[50] = "Peras";
	char ImePrezime[100] = "";
	char kopija[100] = "";

	// C++
	using std::string; using std::cout;
	string sIme = "Ivan";
	string sPrezime = "Peras";
	string sImePrezime = "";
	string sKopija = "";

	cout << "Kopiranje:\n";

	strcpy_s( ImePrezime, ime );
	cout << "C:\t" << ImePrezime << '\n';

	sImePrezime = sIme;
	cout << "C++:\t" << sImePrezime << '\n';

	cout << "Spajanje:\n";

	strcat_s( ImePrezime, " " );
	strcat_s( ImePrezime, prezime );
	cout << "C:\t" << ImePrezime << '\n';

	sImePrezime = sImePrezime + " " + sPrezime;
	cout << "C++:\t" << sImePrezime << '\n';

	cout << "Mjerenje duljine:\n";

	cout << "C:\t" << strlen( ImePrezime ) << '\n';

	cout << "C++:\t" << sImePrezime.length() << '\n';

	cout << "Usporedba:\n";

	cout << "C:\t" << !strcmp( ImePrezime, ime ) << '\n';

	cout << "C++:\t" << ( sImePrezime == sIme ) << '\n';


}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina8::zad2()
KOD:
{
	using std::cout; using std::cin; using std::vector;
	vector<double> vec;
	vector<double> revVec;
	double val;

	cout << "Unos proizvoljnog niza brojeva u vektor.\n";
	cout << "Unos zavrsava kada se otkuca neko slovo!\n";

	while( cin >> val )
	{
		vec.push_back( val );
	}
	cin.clear();	// ocisti failbit zastavicu
	cin.ignore();	// ignoriraj zadnji pritisnuti enter
	double sum = 0;

	for( vector<double>::const_iterator it = vec.begin(); it != vec.end(); it++ )
	{
		sum += *it;
	}

	for( int i = vec.size() - 1; i > -1; i-- )
	{
		revVec.push_back( vec[i] );
	}

	double avg = sum / vec.size();

	cout << "Suma od " << vec.size()
		<< " elemenata: " << sum
		<< ". Srednja vrijednost: " << avg << '\n';

	for( vector<double>::iterator it = revVec.begin(); it != revVec.end(); it++ )
	{
		cout << *it << '\n';
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina8::zad3()
KOD:
{
	using std::cout; using std::string;
	int a = 3,
		b = 5;

	double c = 3.1,
		d = 5.2;

	cout << "maximum(int): " << maximum( a, b ) << '\n';
	cout << "maximum(double): " << maximum( c, d ) << '\n';

	cout << "apsolutno a: " << apsolutnaVrijednost( a ) << '\n';;
	cout << "apsolutno -6.77: " << apsolutnaVrijednost( -6.77 ) << '\n';


	string s1 = "bob",
		s2 = "jabuka",
		s3 = "anavolimilovana";

	cout << "palindrom(bob): " << palindrom( s1 ) << '\n'
		<< "palindrom(jabuka): " << palindrom( s2 ) << '\n'
		<< "palindrom(anavolimilovana): " << palindrom( s3 ) << '\n';

}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina9::zad1()
KOD:
{
    using std::cin; using std::cout; using std::string; using std::list;
    string str;
    list<string> lst;
    list<string>::const_iterator it;

    std::ofstream izlaz("lista.txt");

    cin >> str;
    while (str != "kraj") {
        lst.push_back(str);
        cin >> str;
    }

    cout << '\n';
    izlaz << "Lista:\n";

    for (it = lst.begin(); it != lst.end(); it++) {
        cout << *it << '\n';
        izlaz << *it << '\n';
    }
    cout << '\n';
    izlaz << '\n';

    lst.reverse();
    izlaz << "Obrnuto:\n";
    for (it = lst.begin(); it != lst.end(); it++) {
        izlaz << *it << '\n';
        cout << *it << '\n';
    }

    izlaz.close();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina9::zad2()
KOD:
{
    using std::vector; using std::cout;
    int a;
    vector<int> v;
    vector<int>::iterator iter;

    std::cin >> a;
    while (a != 0) {
        v.push_back(a);
        std::cin >> a;
    }
    cout << '\n';

    sort(v.begin(), v.end());

    iter = find(v.begin(), v.end(), 55);
    if (iter != v.end()) {
        cout << "iter: " << *iter << '\n';
    }
    else {
        cout << "Not found!\n";
    }

    for (iter = v.begin(); iter != v.end(); iter++) {
        cout << *iter << '\n';
    }
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina9::zad3()
KOD:
{
    LP* a = new LP;
    CD* b = new CD;
    DVD* c = new DVD;

    a->_ispisi();
    b->_ispisi();
    c->_ispisi();

    delete a, b, c;

    MP3CD d;
    d._ispisi();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina9::zad4()
KOD:
{
    using std::cout;
    Tocka2D t1(1, 1);
    cout << t1.getX() << ", " << t1.getY() << '\n';

    Tocka3D t11(2, 2, 2);
    cout << "t11" << t11 << '\n';

    Tocka3D t12(-2, -2, -2);
    cout << "t12" << t12 << '\n';

    cout << "t11" << t11 << " == t12" << t12 << ": " << t11.operator==(t12) << '\n';

    /* t12.setX(2);
     t12.setY(2);
     t12.setZ(2);*/

    std::cout << "t12 = t11\n";
    t12 = t11;
    cout << "t12" << t12 << '\n';
    cout << "t11" << t11 << " == t12" << t12 << ": " << (t11 == t12) << '\n';

    t12.setZ(3);
    cout << "t12" << t12 << '\n';
    cout << "t11" << t11 << " == t12" << t12 << ": " << (t11 == t12) << '\n';

}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void Cjelina9::zad6()
KOD:
{
    O_O_P o1;

    o1.setOcjenuPredavanja(4);
    o1.setIspraljenaOcjenaPredavanja(5, 0);
    o1.ispisiOcjenePredavanja();
}
--------------------------------
====================================================
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj7_1()
KOD:
{
	char odabir = { 0 };
	int rez, x, y, z;
	printf( "x = " );
	scanf_s( "%d", &x );
	printf( "y = " );
	scanf_s( "%d", &y );
	printf( "z = " );
	scanf_s( "%d", &z );
	printf( "Unesi slovo za zeljenu operciju:\na) rez = x + y + z\nb) rez = x * y * z\nc) rez = x / y + z\nd) rez = (x / y - z)na1 / 2\n" );
	scanf_s( " %c", &odabir );
	switch( tolower( odabir ) )
	{
	case 'a':
		rez = x + y + z;
		printf( "rez = %d", rez );
		break;
	case 'b':
		rez = x * y * z;
		printf( "rez = %d", rez );
		break;
	case 'c':
		rez = x / y + z;
		printf( "rez = %d", rez );
		break;
	case 'd':
	{
		int temp = sqrt( x / y - z );
		if( temp < 0 )
		{
			printf( "Greska! izraz je < 0\n" );
		}
		else
		{
			rez = temp;
			printf( "rez = %d", rez );
		}
		break;
	}
	default:
		printf( "Greska! krivi unos\n" );
		break;
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj7_2()
KOD:
{
	int Y = 5;
	vj7_ispisVrijednostiVarijabla( Y );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj7_3()
KOD:
{
	int rezultat = vj7_faktorijele( 3 );
	printf( "Rezultat 3! = %d\n", rezultat );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj7_4()
KOD:
{
	printf( "(moj) exp(5): %e\nexp(5): %e\n", vj7_exp( 1, 5 ), exp( 1 ) );
	printf( "(moj) exp(5): %e\nexp(5): %e\n", vj7_exp( 5, 5 ), exp( 5 ) );
	printf( "(moj) exp(10): %e\nexp(10): %e\n", vj7_exp( 5, 10 ), exp( 5 ) );
	printf( "(moj) exp(50): %e\nexp(50): %e\n", vj7_exp( 5, 50 ), exp( 5 ) );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj8_1()
KOD:
{
	const int BROJ_ELEMENATA = 6;
	int testBroj1 = 4, testBroj2 = 5;
	int A[BROJ_ELEMENATA] = { 3, 5, 7, 8, 9, 10 };
	printf( "niz: " );
	for( const auto br : A )
		printf( "%d ", br );
	printf( "\n\ntestBroj1(%d) se ", testBroj1 );
	( vj8_postoji_li_element( A, BROJ_ELEMENATA, testBroj1 ) ) ? printf( "nalazi u nizu\n" ) : printf( "ne nalazi u nizu\n" );
	printf( "testBroj2(%d) se ", testBroj2 );
	( vj8_postoji_li_element( A, BROJ_ELEMENATA, testBroj2 ) ) ? printf( "nalazi u nizu\n" ) : printf( "ne nalazi u nizu\n" );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj8_2()
KOD:
{
	const int vel = 3;
	int matricaA[vel][vel];
	vj8_unosElemenataMatrice( matricaA, vel );
	printf( "produkt = %d", vj8_produktElemenataMatrice( matricaA, vel ) );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj8_3()
KOD:
{
	const char* a = { "ovojekratkitest" };
	printf( "my_strlen: %zd\nstrlen: %zd\n", vj8_my_strlen( a ), strlen( a ) );

	const char* c = { "tesktZaKopirat" };
	char* d = (char*) malloc( vj8_my_strlen( c ) + 1 );
	size_t duljina = strlen( c );
	char* e = (char*) malloc( duljina + 1 );
	if( d )	vj8_my_strcpy( d, c );
	if( e )	strcpy_s( e, duljina, c );
	printf( "c: %s\nd: %s\ne: %s", c, d, e );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj8_4()
KOD:
{
	int n;
	printf( "Unesi broj: " );
	scanf_s( "%d", &n );
	printf( "%d! = %d\n", n, vj8_rekurzija_faktorijele( n ) );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj8_5()
KOD:
{
	int niz[5] = { 3, 5, 1, 7, 2 };
	printf( "najmanji element niza je: %d\n", vj8_rekurzija_minMax_elementNiza( niz, 4 ) );
	printf( "najmanji element niza je: %d\n", vj8_rekurzija_minMax_elementNiza( niz, 4, false ) );	// 0 - min, 1 - max
	printf( "najveci element niza je: %d\n", vj8_rekurzija_minMax_elementNiza( niz, 4, true ) );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj8_6()
KOD:
{
	unsigned int deka;
	printf( "Unesi dekadski broj: " );
	scanf_s( "%d", &deka );
	unsigned int baza;
	printf( "Odaberi sustav u koji zelis pretvorit:\n2 -> binarni\n8 -> oktalni\n16 -> heksadecimalni\n\n" );
	scanf_s( "%d", &baza );

	printf( "%d(10) = %s(%d)\n", deka, vj8_deka_u_bin_okt_heksa( deka, baza ), baza );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj9_1()
KOD:
{
	Vrijeme v1 = { 2, 35, 45 };
	Vrijeme v2{ 3, 50, 30 };
	Vrijeme v3 = v9_zbrajanjeVremena( &v1, &v2 );
	v9_ispisVremena( &v3 );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj9_2()
KOD:
{
	struct Datum d1 { 2000, 6, 5 };
	struct Datum d2 { 2003, 3, 31 };
	struct Datum d3 { 2000, 4, 30 };
	struct Datum d4 { 2004, 2, 1 };
	v9_ispisDatuma( &d1 );
	v9_ispisDatuma( &d2 );
	v9_ispisDatuma( &d3 );
	v9_ispisDatuma( &d4 );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj9_3()
KOD:
{
	const int BROJ_OSOBA = 5;
	struct Osoba osobe[BROJ_OSOBA];
	osobe[0] = { "Marko", "Marulic", { 15, 5, 0 }, { 2003, 5, 12  } };
	osobe[1] = { "Ana", "Marelica", {20, 51, 50 }, { 2001, 5, 17 } };
	osobe[2] = { "Pero", "Grgulj", { 10, 0, 7 }, { 2000, 8, 1 } };
	osobe[3] = { "Marta", "Marulic", { 15, 5, 0 }, { 2003, 5, 12 } };
	osobe[4] = { "Marko", "Marulic", { 15, 5, 0 }, { 2003, 5, 12 } };

	struct Osoba prva = osobe[0];
	v9_prvaOsobaPoAbecedi_ime_pa_prezime( osobe, BROJ_OSOBA );
	puts( "" );
	v9_najstarijaOsoba( osobe, BROJ_OSOBA );	// popravi
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj10_1()
KOD:
{
	const int LIMIT_ELEMENATA = 10;
	int niz[LIMIT_ELEMENATA];
	printf( "Unesi 10 cijelih brojeva\n" );
	for( int i = 0; i < LIMIT_ELEMENATA; i++ )
	{
		printf( "Unesi %d. el: ", i );
		scanf_s( "%d", niz + i );
	}
	puts( "" );
	for( int i = 0; i < LIMIT_ELEMENATA; i++ )
	{
		printf( "niz[%d] = %d	na lokaciji %p\n", i, *( niz + i ), niz + i );
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj10_2()
KOD:
{
	int suma, produkt, razlika;
	vracanjeVrijednosti_3_varijableUfunkciji( &suma, &produkt, &razlika, 25, 5 );
	printf( "broj1: %d\nbroj2: %d\nsuma: %d\nrazlika: %d\nprodukt: %d", 25, 5, suma, razlika, produkt );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj10_3()
KOD:
{
	struct Datum d1 { 2000, 6, 5 };
	struct Datum d2 { 2003, 3, 31 };
	struct Datum d3 { 2005, 4, 30 };
	struct Datum d4 { 2004, 2, 1 };

	printf( "dan prije unesenog dana je: %d\n", v9_proracunDatuma( &d1, -1 ) );
	printf( "dan poslije unesenog dana je: %d\n\n", v9_proracunDatuma( &d1, 1 ) );
	printf( "dan prije unesenog dana je: %d\n", v9_proracunDatuma( &d2, -1 ) );
	printf( "dan poslije unesenog dana je: %d\n\n", v9_proracunDatuma( &d2, 1 ) );
	printf( "dan prije unesenog dana je: %d\n", v9_proracunDatuma( &d3, -1 ) );
	printf( "dan poslije unesenog dana je: %d\n\n", v9_proracunDatuma( &d3, 1 ) );
	printf( "dan prije unesenog dana je: %d\n", v9_proracunDatuma( &d4, -1 ) );
	printf( "dan poslije unesenog dana je: %d\n\n", v9_proracunDatuma( &d4, 1 ) );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj10_4()
KOD:
{
	const int BUFFER_LIMIT = 128;
	char tekst[BUFFER_LIMIT] = { "Kratka prica je oblik kratke narativne proze. Kratke price su sazetije u usporedbi s duzim djelima fikcije, kao sto su novele\0" };
	char podstring[BUFFER_LIMIT - 1];	// inicijalizacija u funkciji vj10_brPonavljanja_podStringa_u_stringu
	printf( "broj ponavljanja podstringa: %d", vj10_brPonavljanja_podstringa_u_stringu( tekst, BUFFER_LIMIT, podstring ) );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj11_1()
KOD:
{
	FILE* fp;
	FILE* fp_copy{};
	char naziv1[20], naziv2[20];
	printf( "Upisi puni naziv datoteke .txt: " );
	scanf_s( "%s", naziv1 );
	printf( "Upisi puni naziv za kopiju datoteke .txt: " );
	scanf_s( "%s", naziv2 );

	fopen_s( &fp, naziv1, "w" );
	if( fp == NULL )
		printf( "Greska pri otvaranju datoteke" );
	else
	{
		fprintf( fp, "Hello World!\n" );
		fprintf( fp, "Hello World drugi put!" );
		fclose( fp );
	}
	vj11_kopiranjeDatoteke( fp, fp_copy, naziv1, naziv2 );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj11_2()
KOD:
{
	FILE* fp;
	fopen_s( &fp, "vj11_zad2.txt", "r" );

	if( fp == NULL )
		printf( "GRESKA\n" );
	else
	{
		char broj;
		int rezultat = 0;
		while( ( broj = fgetc( fp ) ) != EOF && ( broj >= '0' && broj <= '9' ) )
		{
			rezultat *= 10;
			rezultat += broj - '0';
		}
		fclose( fp );

		printf( "%d", rezultat );
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj11_3()
KOD:
{
	FILE* fp;
	fopen_s( &fp, "vj11_zad3.txt", "r" );	// provjeri postoji li
	if( fp )
	{
		vj11_citanjeDatoteke( fp );	// samo procitaj iz nje
		fclose( fp );
	}
	else
	{
		fopen_s( &fp, "vj11_zad3.txt", "w" );	// stvori je
		if( fp )
		{
			fprintf( fp, "Ana\nA\n2000\n" );	// i popuni vrijednostima
			fprintf( fp, "Ana\nB\n2000\n" );
			fprintf( fp, "Mirko\nA\n2000\n" );
			fprintf( fp, "Ana\nC\n2000\n" );
			fprintf( fp, "Boro\nA\n2000\n" );
			fprintf( fp, "Grga\nA\n2000\n" );
			fprintf( fp, "Ana\nD\n2000\n" );
			fprintf( fp, "Pero\nA\n2000\n" );
			fprintf( fp, "Ana\nE\n2000\n" );
			fclose( fp );

			fopen_s( &fp, "vj11_zad3.txt", "r" );
			if( fp )
			{
				vj11_citanjeDatoteke( fp );					// te procitaj je
				fclose( fp );
			}
			else	printf( "GRESKA PRILIKOM OTVARANJA \"vj11_zad3.txt\" datoteke\n" );
		}
		else	printf( "GRESKA PRILIKOM OTVARANJA \"vj11_zad3.txt\" datoteke\n" );
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj11_4()
KOD:
{
	FILE* fp;
	fopen_s( &fp, "vj11_zad4.txt", "r" );
	if( fp )
	{
		vj11_citanjeDatoteke2( fp );
		fclose( fp );
		fp = NULL;
	}
	else printf( "GRESKA\nNapravi datoteku imena \"vj11_zad4.txt\" i zapisi nesto u nju u programu za obradu teksta" );

}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj12_1()
KOD:
{
	int brStudenata = 0;
	int sumaBodova = 0;
	int zelimJosStudenata = -1;
	do
	{
		zelimJosStudenata = -1;
		while( zelimJosStudenata == -1 )
		{
			printf( "Imas li jos studenata na popisu?( stisni Esc - ne ili Tab - da )\n" );
			char znak = _getch();
			if( znak == 27 ) { zelimJosStudenata = false; }
			else if( znak == '\t' ) { zelimJosStudenata = true; }
		}
		if( !zelimJosStudenata )	break;
		puts( "" );
		do
		{
			int bodovi = -2;
			while( bodovi < -1 || bodovi > 100 )
			{
				printf( "Ako zelis prekinut unos bodova, unesi -1\n" );
				printf( "Unesi bodove [0-100]: " );
				scanf_s( "%d", &bodovi );
				puts( "" );
			}
			if( bodovi == -1 )	break;
			sumaBodova += bodovi;
			++brStudenata;
		} while( 1 );
		puts( "----" );
	} while( 1 );

	if( brStudenata > 0 ) printf( "\nProsjecni broj bodova svih studenata: %f\n", float( sumaBodova / float( brStudenata ) ) );
	else printf( "\nNisi unio bodove za niti jednog studenta!" );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj12_2()
KOD:
{
	int broj;
	printf( "Unesi broj: " );
	scanf_s( "%d", &broj );
	int tempBr = broj;
	int velicina = tempBr > 0 ? 1 : 2;
	while( tempBr > 0 )
	{
		velicina++;
		tempBr /= 10;
	}
	char* str = (char*) malloc( velicina * sizeof( char ) );
	if( str )
	{
		for( int i = 1; i < velicina; ++i )
		{
			*( str + velicina - i - 1 ) = broj % 10 + '0';
			broj /= 10;
		}
		*( str + velicina - 1 ) = '\0';
		printf( "string: %s\n", str );
		free( str );
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj12_3()
KOD:
{
	FILE* fp;
	fopen_s( &fp, "vj12_zad3_imena.txt", "w" );
	if( fp == NULL )
		printf( "Greska pri otvaranju datoteke" );
	else
	{
		fprintf( fp, "Iva\n" );
		fprintf( fp, "Marko\n" );
		fprintf( fp, "Luka\n" );
		fprintf( fp, "Grga\n" );
		fclose( fp );
	}
	char imeStudenta[15];
	int bodovi;
	fopen_s( &fp, "vj12_zad3_imena.txt", "r" );
	if( fp )
	{
		while( fgets( imeStudenta, 15, fp ) != NULL )
		{
			printf( "%s", imeStudenta );
			int ukupno = 0;
			for( int i = 0; i < 3; i++ )
			{
				bool isValidScore = false;
				while( !isValidScore )
				{
					printf( "unesi bodove %d. kolokvija: ", i + 1 );
					scanf_s( "%d", &bodovi );
					if( bodovi >= 0 && bodovi <= 100 )
					{
						ukupno += bodovi;
						isValidScore = true;
					}
				}
			}
			ukupno /= 3;
			if( ukupno > 87 && ukupno <= 100 )
			{
				printf( "\nOcjena: 5, sa %d ukupnih bodova\n\n", ukupno );
			}
			else if( ukupno > 74 )
			{
				printf( "\nOcjena: 4, sa %d ukupnih bodova\n\n", ukupno );
			}
			else if( ukupno > 59 )
			{
				printf( "\nOcjena: 3, sa %d ukupnih bodova\n\n", ukupno );
			}
			else if( ukupno > 48 )
			{
				printf( "\nOcjena: 2, sa %d ukupnih bodova\n\n", ukupno );
			}
			else if( ukupno >= 0 )
			{
				printf( "\nOcjena: 1, sa %d ukupnih bodova\n\n", ukupno );
			}
			else
			{
				printf( "\nGRESKA!\n\n" );
			}
		}
		fclose( fp );
	}
	else printf( "\nNemogu otvorit datoteku za citanje!" );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj12_4()
KOD:
{
	int n;
	printf( "Unesi velicinu nizova: " );
	scanf_s( "%d", &n );
	int* niz1 = (int*) malloc( n * sizeof( int ) );
	int* niz2 = (int*) malloc( n * sizeof( int ) );
	if( niz1 == NULL )	return;
	if( niz2 == NULL ) { free( niz1 ); return; }

	for( int i = 0; i < n; i++ )	// napuni nizove vrijednostima
	{
		*( niz1 + i ) = i;
		*( niz2 + i ) = ( i + 1 ) * 10;
	}

	int* rep1 = niz1 + n - 1;
	int* rep2 = niz2 + n - 1;

	while( _getch() != 27 )	// update na pritisak tipke, zavrsi kada se stisne Esc
	{
		Sleep( 50 );
		for( int i = 0; i < n; i++ )	// ispisi stanje nizova
		{
			printf( "%d ", *( niz1 + i ) );
		}
		for( int i = 0; i < n; i++ )
		{
			printf( "%d ", *( niz2 + i ) );
		}
		printf( "\n" );

		int glava1 = *niz1;
		int glava2 = *niz2;
		for( int i = 0; i < n - 1; ++i )	// pomakni sve el u niz1 ulijevo
		{
			*( niz1 + i ) = *( niz1 + i + 1 );
		}
		*rep1 = glava2; // premjesti el sa niz od glave2 na niz repa1

		for( int i = 0; i < n - 1; ++i )
		{
			*( niz2 + i ) = *( niz2 + i + 1 );	// pomakni sve el u nizu za ulijevo
		}
		*rep2 = glava1; // premjesti el sa niz od glave1 na niz repa2
	}
	free( niz1 );
	free( niz2 );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj1_1()
KOD:
{
	char a = 'a';
	int b = 5;
	float c = 6.4;
	double d = 7.444444444;

	int mem = sizeof( a ) + sizeof( b ) + sizeof( c ) + sizeof( d );
	printf( "%c %p\n", a, &a );
	printf( "%d %p\n", b, &b );
	printf( "%f %p\n", c, &c );
	printf( "%e %p\n", d, &d );
	printf( "Varijable su zauzele %d bajtova\n", mem );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj1_2()
KOD:
{
	char a = '0', b = '9', c = a + b;
	printf( "a: %c b: %c c: %c\n", a, b, c );
	printf( "a: %d b: %d c: %d\n", a, b, c );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj1_3()
KOD:
{
	int a = 15, b = 5;
	printf( "suma: %d\n", a + b );
	printf( "razlika: %d\n", a - b );
	printf( "produkt: %d\n", a * b );
	printf( "kvocijent: %d\n", a / b );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj1_4()
KOD:
{
	int suma = 0;
	for( int i = 0; i < 50; ++i )
		suma += i;
	printf( "suma: %d\n", suma );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj1_5()
KOD:
{
	const int SIRINA = 5;
	const int VISINA = 5;
	char slovo = 'E';
	for( int redak = 0; redak < VISINA; ++redak )
	{
		for( int brojPonavljanja = SIRINA - redak; brojPonavljanja > 0; --brojPonavljanja )
		{
			printf( "%c ", slovo - redak );	// Umanjuj ASCII vrijednost tako da dobijes zeljeno slovo
		}
		printf( "\n" );
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj2_1()
KOD:
{
	int cijeliBr;
	float realniBr;
	printf( "unesi realni broj: " );
	scanf_s( "%f", &realniBr );
	cijeliBr = ( (int) ( realniBr * 10 ) % 10 >= 5 ) ? realniBr + 1 : realniBr;	// OPTIMIZACIJA: koristi znanje o prikazu float brojeva u memoriji i uz pomoc pravih bitova utvrdi treba li povecat broj
	printf( "cijeli broj: %d\n", cijeliBr );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj2_2()
KOD:
{
	const int INPUT_LIMIT = 10;
	int broj, brojac = 0;
	while( brojac < INPUT_LIMIT )
	{
		printf( "unesi broj: " );
		scanf_s( "%d", &broj );
		if( broj % 2 == 1 )	// OPTIMIZACIJA: koristi znanje o reprezentaciji inta u memoriji i provjeri tocan bit
		{
			printf( "%d\n", broj );
		}
		++brojac;
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj2_3()
KOD:
{
	const int INPUT_LIMIT = 10;
	int broj, brojac = 0, brojacNeparan = 0;
	while( brojac < INPUT_LIMIT )
	{
		printf( "unesi broj: " );
		scanf_s( "%d", &broj );
		if( broj % 3 == 0 )
		{
			++brojacNeparan;
		}
		++brojac;
	}
	printf( "%d broja je djeljivo sa 3\n", brojacNeparan );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj2_4()
KOD:
{
	const int INPUT_LIMIT = 10;
	char slovo;
	int  brojac = 0, brojac_MalihSlova = 0, brojac_H = 0;
	while( brojac < INPUT_LIMIT )
	{
		printf( "unesi slovo: " );
		scanf_s( " %c", &slovo, 2 );
		printf( "\n" );
		if( slovo >= 'a' && slovo <= 'z' )
		{
			brojac_MalihSlova++;
		}
		else if( slovo == 'H' )
		{
			++brojac_H;
		}
		++brojac;
	}
	printf( "\nMalih slova ima: %d\nNjih %d je bilo = H", brojac_MalihSlova, brojac_H );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj2_5()
KOD:
{
	const int BROJ_UCENIKA = 5;
	int bodovi, sumaBodova = 0, prolaz = 0;
	for( int i = 0; i < BROJ_UCENIKA; ++i )
	{
		printf( "Unesi bodove %d. ucenika\n", i + 1 );
		scanf_s( "%d", &bodovi );
		if( bodovi > 50 )	// TODO: OPTIMIZACIJA: branchless increment
			prolaz++;
		sumaBodova += bodovi;
	}
	printf( "Kolokvij je proslo %d ucenika\nProsjecni broj bodova je %d\n", prolaz, sumaBodova / BROJ_UCENIKA );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj3_1()
KOD:
{
	int broj, suma = 0, brojac = 0;
	printf( "Unesi brojeve razlicite od 0 za daljnji unos\n" );
	do
	{
		scanf_s( "%d", &broj );
		if( broj != 0 )
		{
			suma += broj;
			++brojac;
		}
		else
		{
			break;
		}

	} while( true );
	printf( "Arihmeticka sredina: %f", (float) suma / brojac );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj3_2()
KOD:
{
	int broj, reverseBroj = 0;
	printf( "Unesi broj: " );
	scanf_s( "%d", &broj );
	while( broj > 0 )
	{
		reverseBroj *= 10;
		reverseBroj += broj % 10;
		broj /= 10;
	}
	printf( "Obrnuti redoslijed znamenaka: %d\n", reverseBroj );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj3_3()
KOD:
{
	int generiraniBroj, korisnikBroj, pokusaj = 0;
	srand( (unsigned) time( NULL ) );
	generiraniBroj = rand() % 1000;
	do
	{
		printf( "Unesi broj o kojem mislis da odgovara izabranom broju: " );
		scanf_s( "%d", &korisnikBroj );
		printf( "\n" );

		++pokusaj;
		if( korisnikBroj > generiraniBroj ) { printf( "Generirani broj je manji od unesenog!\n" ); }
		else if( korisnikBroj < generiraniBroj ) { printf( "Generirani broj je veci od unesenog!\n" ); }
		else
		{
			printf( "Pogodak iz %d. pokusaja!\n", pokusaj );
			break;
		}
	} while( 1 );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj3_4()
KOD:
{
	//for( int i = 1; i <= 100; ++i )
	//{
	//	bool primitivan = false;
	//	for( int j = 2; j < i / 2 + 1; ++j )	// svi brojevi koji su veci od i / 2 + 1 nemogu biti primitivni
	//	{
	//		if( i % j == 0 )
	//		{
	//			primitivan = true;
	//			break;
	//		}
	//	}
	//	if( primitivan )	printf( "Broj %d je primitivan\n", i );
	//}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj4_1()
KOD:
{
	int broj, broj2;
	char operacija = 0;
	while( !operacija )
	{
		printf( "Unesi broj: " );
		scanf_s( "%d", &broj );
		printf( "Unesi operaciju: " );
		scanf_s( " %c", &operacija, 2 );
		printf( "Unesi broj: " );
		scanf_s( "%d", &broj2 );
		switch( operacija )
		{
		case '+':
			printf( "Rezultat operacije %d %c %d = %d", broj, operacija, broj2, broj + broj2 );
			break;
		case '-':
			printf( "Rezultat operacije %d %c %d = %d", broj, operacija, broj2, broj - broj2 );
			break;
		case '*':
			printf( "Rezultat operacije %d %c %d = %d", broj, operacija, broj2, broj * broj2 );
			break;
		case '/':
			printf( "Rezultat operacije %d %c %d = %d", broj, operacija, broj2, broj / broj2 );
			break;
		case '^':
		{
			int rezultat = pow( broj, broj2 );
			printf( "Rezultat operacije %d %c %d = %d", broj, operacija, broj2, rezultat );
		}
		break;
		case '%':
			printf( "Rezultat operacije %d %c %d = %d", broj, operacija, broj2, broj % broj2 );
			break;
		case '<':
			printf( "Jednakost %d %c %d je %s", broj, operacija, broj2, ( broj < broj2 ) ? "tocna" : "netocna" );
			break;
		case '>':
			printf( "Jednakost %d %c %d je %s", broj, operacija, broj2, ( broj > broj2 ) ? "tocna" : "netocna" );
			break;
		default:
			printf( "Kriv unos, pokusaj ponovno\n" );
			operacija = 0;
			break;
		}
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj4_2()
KOD:
{
	const int INPUT_LIMIT = 20;
	int ocjeneKolokvija[20];
	int histogram[6] = {};
	int ocjena = 0;
	printf( "Unesi 20 ocjena\n" );
	for( int i = 0; i < INPUT_LIMIT; ++i )
	{
		while( ocjena < 1 || ocjena > 5 )
		{
			printf( "Unesi ocjenu (1-5): " );
			scanf_s( "%d", &ocjena );
		}
		ocjeneKolokvija[i] = ocjena;
		++histogram[ocjena];
		ocjena = 0;
	}
	printf( "5 - %d\n4 - %d\n3 - %d\n2 - %d\n1 - %d", histogram[5], histogram[4], histogram[3], histogram[2], histogram[1] );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj4_3()
KOD:
{
	const int BROJ_ELEMENATA = 10;
	int niz[BROJ_ELEMENATA];
	int broj;
	for( int el = 0; el < BROJ_ELEMENATA; ++el )
	{
		printf( "Unesi broj: " );
		scanf_s( "%d", &broj );
		niz[el] = broj;
	}

	int min = niz[0], max = niz[0];
	for( int i = 1; i < 10; ++i )
	{
		if( min > niz[i] )			min = niz[i];
		else if( max < niz[i] )	max = niz[i];
	}

	for( int i = 0; i < BROJ_ELEMENATA; ++i )
	{
		for( int j = i; j < BROJ_ELEMENATA; ++j )
		{
			if( niz[i] > niz[j] )
			{
				int temp = niz[i];
				niz[i] = niz[j];
				niz[j] = temp;
			}
		}
	}

	printf( "min: %d\nmax: %d\n", min, max );
	for( int el = 0; el < BROJ_ELEMENATA; ++el )
	{
		printf( "%d ", niz[el] );
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj5_1()
KOD:
{
	char znak = 0;
	while( znak != 27 )
		znak = _getche();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj5_2()
KOD:
{
	const int STRING_LIMIT = 20;
	char str1[STRING_LIMIT] = { 0 };
	char str2[STRING_LIMIT] = { 0 };
	printf( "Unesi tekst u varijablu: " );
	scanf( " %s", &str1 );
	for( int idx = 0; str1[idx] != '\0' && idx < STRING_LIMIT; ++idx )
	{
		if( !( isdigit( str1[idx] ) ) ) { str2[idx] += str1[idx]; }
		else { str2[idx] += ' '; }
	}
	str2[STRING_LIMIT - 1] = '\0';	// forsiraj zadnji karakter drugog stringa da bude 0 terminator (sprijecava citanje memorije koje mu ne pripada ako korisnik unese vise znakova od STRING_LIMITA)
	printf( "str1: %s\nstr2: %s", str1, str2 );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj5_3()
KOD:
{
	const int STRING_LIMIT = 20;
	char str[STRING_LIMIT] = { 0 };
	printf( "Unesi tekst: " );
	scanf_s( " %s", &str );
	str[STRING_LIMIT - 1] = '\0';	// forsiraj kraj stringa
	for( int idx = 0; str[idx] != '\0'; ++idx )
	{
		if( isdigit( str[idx] ) )	str[idx] = ' ';
	}
	printf( "str: %s\n", str );
	//
	for( int idx = 0; str[idx] != '\0'; ++idx )
	{
		if( str[idx] == 'a' || str[idx] == 'e' || str[idx] == 'i' || str[idx] == 'o' || str[idx] == 'u' ||
			str[idx] == 'A' || str[idx] == 'E' || str[idx] == 'I' || str[idx] == 'O' || str[idx] == 'U' )
			str[idx] = ' ';
	}
	printf( "str: %s\n", str );
	//
	for( int idx = 0; str[idx] != '\0'; ++idx )
	{
		if( islower( str[idx] ) )		str[idx] = str[idx] - 'a' + 'A';
		else if( isupper( str[idx] ) )	str[idx] = str[idx] - 'A' + 'a';
	}
	printf( "str: %s\n", str );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj5_4()
KOD:
{
	unsigned int deka;
	char heksa[9] = { '0', '0', '0', '0', '0', '0', '0', '0', '\0' };
	unsigned int pozicija = 0;
	printf( "Unesi dekadski broj: " );
	scanf_s( "%d", &deka );
	while( deka > 0 )
	{
		int temp = deka % 16;
		switch( temp )
		{
		case 10: case 11: case 12: case 13: case 14: case 15:
			heksa[pozicija] = temp - 10 + 'A';	// koristi 10 kao offset 0, 11 kao offset 1, ...
			break;
		default:
			heksa[pozicija] = temp + '0';
			break;
		}
		++pozicija;
		deka /= 16;
	}
	for( int i = 7; i >= 0; --i )
		printf( "%c\n", heksa[i] );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj6_1()
KOD:
{
	int A[3][3], B[3][3];
	int broj;
	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
		{
			printf( "A[%d][%d]: ", i, j );
			scanf( "%d", &broj );
			A[i][j] = broj;
			B[i][j] = 5 * A[i][j];
		}
	}
	//
	printf( "matrica B\n" );
	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
		{
			printf( "%d ", B[i][j] );
		}
		printf( "\n" );
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj6_2()
KOD:
{
	int A[3][3], B[3][3];
	int broj;
	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
		{
			printf( "A[%d][%d]: ", i, j );
			scanf( "%d", &broj );
			A[i][j] = broj;
		}
	}

	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
		{
			B[i][j] = A[j][i];
		}
	}

	printf( "matrica B\n" );
	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
		{
			printf( "%d ", B[i][j] );
		}
		printf( "\n" );
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj6_3()
KOD:
{
	int A[3][3], B[3][3], C[3][3], D[3][3] = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} };
	int broj;
	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
		{
			printf( "A[%d][%d]: ", i, j );
			scanf( "%d", &broj );
			A[i][j] = broj;
			printf( "B[%d][%d]: ", i, j );
			scanf( "%d", &broj );
			B[i][j] = broj;
		}
	}

	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
		{
			C[i][j] = A[i][j] + B[i][j];
		}
	}


	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
		{
			for( int k = 0; k < 3; ++k )
			{
				D[i][j] += A[i][k] * B[k][j];
			}
		}
	}

	printf( "matrica C\n" );
	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
		{
			printf( "%d ", C[i][j] );
		}
		printf( "\n" );
	}
	printf( "matrica D\n" );
	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
		{
			printf( "%d ", D[i][j] );
		}
		printf( "\n" );
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void FESB::vj6_4()
KOD:
{
	const unsigned int BROJ_LJUDI = 5;
	const unsigned int NAME_LIMIT = 20;
	char imena[BROJ_LJUDI][NAME_LIMIT];
	for( int idx = 0; idx < BROJ_LJUDI; ++idx )
	{
		printf( "Unesi %d. ime: ", idx + 1 );
		gets_s( imena[idx] );
		//imena[idx][NAME_LIMIT - 1] = '\0';	// forsiraj kraj stringa
	}
	//
	int idx1 = 0, idx2 = 0;
	for( int tempIdx = 0; tempIdx < BROJ_LJUDI - 1; ++tempIdx )
	{
		idx1 = ( _strcmpi( imena[tempIdx + 1], imena[idx1] ) < 0 ) ? tempIdx + 1 : idx1;
		if( _strcmpi( imena[tempIdx + 1], imena[idx2] ) > 0 )
		{
			idx2 = tempIdx + 1;
		}

	}
	printf( "Prvi po abecedi je: %s, index: %d\nZadnji po abecedi je: %s, index: %d\n", imena[idx1], idx1, imena[idx2], idx2 );
	//
	//sortiranje (Selection sort - vrlo efikasan jer nema puno kopiranja stringa)
	for( unsigned int i = 0; i < BROJ_LJUDI; ++i )
	{
		unsigned int j = i + 1;		// potreban izvan unutarnje petlje
		unsigned int tempIdx = i;	// potreban izvan unutarnje petlje
		bool foundBetterResult = false;
		for( ; j < BROJ_LJUDI; ++j )
		{
			for( unsigned int k = 0; k < NAME_LIMIT && imena[tempIdx][k] != '\0' && imena[j][k] != '\0'; ++k )
			{
				char curr = tolower( imena[j][k] );
				char candidate = tolower( imena[tempIdx][k] );
				if( curr < candidate )
				{
					tempIdx = j;
					break;
				}
				else if( curr > candidate )	break;
			}
		}
		if( bool foundBetterResult = tempIdx != i )
		{
			char temp[NAME_LIMIT];
			strcpy_s( temp, NAME_LIMIT, imena[i] );
			strcpy_s( imena[i], NAME_LIMIT, imena[tempIdx] );
			strcpy_s( imena[tempIdx], NAME_LIMIT, temp );
		}
	}
	puts( "\nSortiran ispis:" );
	for( unsigned int idx = 0; idx < BROJ_LJUDI; ++idx )
		printf_s( "%d. %s\n", idx + 1, imena[idx] );
}
--------------------------------
====================================================
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog10_1()
KOD:
{
	BOLEAN b = TRUE;
	if( b )  	std::cout << "TEST MACRO\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog10_2()
KOD:
{
	BOLEAN isIstina = divisibleBy10( 10 );
	std::cout << "Broj: " << 10 << ( ( isIstina == 1 ) ? " je" : " nije" ) << " djeljiv sa 10!\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog10_3()
KOD:
{
	std::cout << is_digit( 5 );
	std::cout << is_hex( 5 );
	std::cout << is_hex( 'b' );
	std::cout << is_hex( 'g' );
	std::cout << is_hex( 'F' );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog10_4()
KOD:
{
	int a = 5, b = 14, temp = 0;
	std::cout << "swap varijabli putem MACRO:\n";
	swap( a, b, temp );
	std::cout << "sa temp varijablom: " << a << " " << b << "\n";
	swap2( a, b );
	std::cout << "bez temp varijable: " << a << " " << b << "\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog11_1()
KOD:
{
	puts( "PRIJE:" );
	crtaj_grid();
	for( int i = 0; i < X_SIZE; ++i )
	{
		set_bit( i, 0, true );
		set_bit( i, Y_SIZE - 1, 1 );
	}
	std::cout << "\nPoslije:\n";
	crtaj_grid();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog11_2()
KOD:
{
	puts( "PRIJE:" );
	crtaj_grid();
	for( int i = 0; i < X_SIZE; ++i )
	{
		clear_bit( i, 0 );
	}
	std::cout << "\nPoslije:\n";
	crtaj_grid();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog11_3()
KOD:
{
	std::cout << numOfBits( 5 ) << "\n"
		<< numOfBits( 10 ) << "\n"
		<< numOfBits( 15 ) << "\n";
	std::cout << numOfBits( -5 ) << "\n"
		<< numOfBits( -15 ) << "\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog11_4()
KOD:
{
	int broj;
	int temp;
	char postavljeniBitoviBroja[sizeof( broj ) + 1] = { 0 };
	std::cin >> broj;
	temp = broj;
	size_t idx = 0;
	for( ; temp > 0; ++idx )
	{
		postavljeniBitoviBroja[sizeof( broj ) - idx] = ( temp & 0x1 ) + '0';	// OPTIMIZACIJA: spremi rezultat u bufer umjesto zvat funkciju za ispis za svaki broj
		temp >>= 1;
	}
	std::cout << postavljeniBitoviBroja << "\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog11_5()
KOD:
{
	int broj;
	std::cin >> broj;
	std::array<short, 8> odvojeno;
	char bitoviDijelaBroja[5] = { 0 };
	odvojeno = podijeliIntegerU8Dijela( broj );
	for( int i = 0; i < 8; ++i )
	{
		for( int j = 0; j < 4; ++j )
		{
			bitoviDijelaBroja[4 - j] = ( odvojeno[i] & 0x01 ) + '0';
			odvojeno[i] >>= 1;
		}
		std::cout << bitoviDijelaBroja << "\n";
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog11_6()
KOD:
{
	char broj = 54;
	char result = shiftBitsLeft( broj );
	char bitoviBroja[sizeof( broj ) + 1] = { 0 };
	const char MSG = 1 << sizeof( broj );	// Most Significant Bit
	std::cout << "\nBroj: ";
	size_t idx = 0;
	do
	{
		bitoviBroja[idx] = ( broj & MSG ) + '0';
		broj <<= 1;
		++idx;
	} while( broj > 0 );
	std::cout << bitoviBroja
		<< "(2)\nRezultat: ";

	idx = 0;
	do
	{
		bitoviBroja[idx] = ( result & MSG ) + '0';
		result <<= 1;
		++idx;
	} while( result > 0 );
	std::cout << bitoviBroja << "(2)";	// po bazi 2
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog13_1()
KOD:
{
	Parsity primjer;
	primjer.put();
	std::cout << primjer.test() << "\n";
	primjer.put();
	std::cout << primjer.test() << "\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog13_2()
KOD:
{
	Checkbook book1;
	book1.addItem( 5 );
	book1.addItem( 100 );
	book1.addItem( 100 );
	std::cout << book1.total();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog13_3()
KOD:
{
	Queue q;
	q.addItem( 1 );
	q.addItem( 2 );
	q.addItem( 3 );
	std::cout << q.get() << "\n";
	std::cout << q.get() << "\n";
	q.addItem( 10 );
	std::cout << q.get() << "\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog13_4()
KOD:
{
	Small_set small_set;
	small_set.set( 3 );
	small_set.set( 5 );
	small_set.set( 5 );
	std::cout << small_set.test( 3 ) << '\n';      // Prints "1"
	std::cout << small_set.test( 0 ) << '\n';        // Prints "0"
	small_set.clear( 5 );                             // Set contains [3]
	Small_set another_set( small_set );
	small_set.set( 0 );
	std::cout << small_set.test( 3 ) << '\n';      // Prints "1"
	std::cout << small_set.test( 0 ) << '\n';        // Prints "0"
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog13_5()
KOD:
{
  ////todo: FlachCards klasa
	std::vector<FlashCards::single_card> cards = {	// dodavanje kartica dinamicki
		{ "test1", "test11" },
		{ "test2", "test2" },
		{ "test3", "test3" },
		{ "test4", "test4" },
		{ "test5", "test5" }
	};

	FlashCards fc( cards.data(), cards.size() );
	fc.izbornik();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog14_1()
KOD:
{
	ShareFile1 test;
	std::cout << "ShareFile1: " << is_using_file1() << "\n";
	ShareFile2_ test2;
	std::cout << "ShareFile2: " << is_using_file1( 0 ) << "\n";
	std::cout << "----------------\n";

	test.otvori_datoteku();
	std::cout << "ShareFile1: " << is_using_file1() << "\n";
	test2.otvori_datoteku();
	std::cout << "ShareFile2: " << is_using_file1( 0 ) << "\n";
	std::cout << "----------------\n";

	test.zatvori_datoteku();
	test2.zatvori_datoteku();
	test2.otvori_datoteku();
	std::cout << "ShareFile2: " << is_using_file1( 0 ) << "\n";
	test.otvori_datoteku();
	std::cout << "ShareFile1: " << is_using_file1() << "\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog14_2()
KOD:
{
	std::array<Pigs, 5> pigs;
	std::array<Dogs, 2> dogs;
	std::array<Horses, 3> horses;
	std::cout << ukupanBrojZivotinja() << "\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog14_3()
KOD:
{
	std::array<Stack_Instance, 5> stacks;
	std::cout << Stack_Instance::who_is_owner( &stacks[0], 5 ) << "\n";
	stacks[0].take_control();
	std::cout << Stack_Instance::who_is_owner( &stacks[0], 5 ) << "\n";
	stacks[4].pop();
	stacks[0].push_back( 10 );
	std::cout << "stack[0] size: " << stacks[0].size()
		<< "\nstack[1] size: " << stacks[1].size()
		<< '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog14_4()
KOD:
{
  //227. stranica
	char ime[] = "Dogs.hpp";
	Line_number test( ime );
	if( test.getCurrentLine() == std::numeric_limits<size_t>::max() )	return; // failed to open
	Line_number test2( ime );
	if( test2.getCurrentLine() == std::numeric_limits<size_t>::max() )	return;	// failed to open

	std::cout << "test2.getCurrentLine(): " << test2.getCurrentLine() << '\n';
	std::cout << "\ntest - test2: " << test.getFileRef().tellg() << " - " << test2.getFileRef().tellg() << "\n";
	test.goto_line( 5 );
	std::cout << "\ntest - test2: " << test.getFileRef().tellg() << " - " << test2.getFileRef().tellg() << "\n";
	test.goto_line( 2 );
	std::cout << "\ntest - test2: " << test.getFileRef().tellg() << " - " << test2.getFileRef().tellg() << "\n";
	test2.goto_line( 2 );
	std::cout << "\ntest - test2: " << test.getFileRef().tellg() << " - " << test2.getFileRef().tellg() << "\n";
	std::cout << "test.getCurrentLine(): " << test.getCurrentLine() << '\n';
	std::cout << "test.getFileRef().tellg(): " << test.getFileRef().tellg() << '\n';
	test2.goto_line( 6 );
	test.goto_line( 6 );
	std::cout << "test.getCurrentLine(): " << test.getCurrentLine() << '\n';
	std::cout << "test2.getCurrentLine(): " << test2.getCurrentLine() << '\n';
	test2.getFileRef().seekg( 5, std::ios::cur );
	std::cout << "test2.getCharPos(): " << test2.getCharPos() << '\n';
	test2.goto_line( 0 );
	test2.getFileRef().seekg( 5, std::ios::cur );
	std::cout << "test2.getCharPos(): " << test2.getCharPos() << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog15_1()
KOD:
{
	std::array<int, 15> niz;
	niz.fill( 15 );
	for( const auto& n : niz )
		std::cout << n << " ";
	std::cout << "\n";
	postavi_niz_na_nulu( niz );
	for( const auto& n : niz )
		std::cout << n << " ";
	std::cout << "\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog15_2()
KOD:
{
	const char str1[] = " \ttest ";
	const char str2[] = "  \t ";
	const char* c = prvi_alfa_num( str1 );
	const char* d = prvi_alfa_num( str2 );
	if( c )
		std::cout << c << "\n";
	else
		std::cout << "nullptr\n";
	if( d )
		std::cout << d << "\n";
	else
		std::cout << "nullptr\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog16_1()
KOD:
{
	File_16C f1( "linije.dat" );
	std::cout << "broj linija: " << f1.numOfLinesInFile() << " u datoteci: \"" << f1.getName() << "\"\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog16_2()
KOD:
{
	File_16C f2( "linija.dat" );
	f2.copy_file( "copy-linija.dat" );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog16_3()
KOD:
{
	File_16C f3;
	std::fstream lista( "lista.dat", std::ios::out );
	lista << 3 << " " << 6 << " " << 9 << " " << 10 << " " << 11 << " " << 12;
	lista.close();
	lista.open( "lista.dat", std::ios::out | std::ios::in | std::ios::ate );
	lista.seekg( std::ios::beg );
	std::cout << "\"lista.dat\": ";
	f3.ispis( lista );
	std::cout << "\n";
	f3.listOfNumbers( lista );

	std::fstream sa3( "djeljivi sa 3.dat", std::ios::in | std::ios::app );
	std::cout << "\"djeljivi sa 3.dat\": ";
	f3.ispis( sa3 );
	std::cout << "\n";

	std::fstream ostali( "svi ostali.dat", std::ios::in | std::ios::app );
	std::cout << "\"svi ostali.dat\": ";
	f3.ispis( ostali );
	std::cout << "\n";

	lista.close();
	sa3.close();
	ostali.close();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog16_4()
KOD:
{
	File_16C f4( "File_16C remove high bit.txt" );
	typedef const unsigned char cuc;
	cuc podaci[] = { static_cast<cuc>( 192 ), static_cast<cuc>( 168 ), static_cast<cuc>( 128 ), static_cast<cuc>( 125 ), '\0' };
	std::fstream in( f4.getName(), std::ios::out | std::ios::app | std::ios::trunc );
	in << podaci;
	in.close();
	f4.removeHighBit();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog16_5()
KOD:
{
	File_16C f5( "pretvorba ASCI u bin.dat" );
	std::cout << "PRIJE: ";
	f5.ispis();

	if( f5.ASCI_to_bin() )
	{
		std::cout << "\nPretvorba uspjesna!\n";
		f5.bin_to_ASCI();
		std::cout << "\nPOSLIJE: ";
		f5.ispis();
	}
	else
		std::cout << "Nista nece da radi\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog16_6()
KOD:
{
	File_16C f6( "osobe.inf" );
	f6.read_info_o_osobi();
	f6.ispis_osoba();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog17_2__1()
KOD:
{
	std::cout << "2x2:\n";
	std::array<std::array<int, 2>, 2> matrix = { { {{ 2, 1 }},
												{{ 1, 1 }} } };
	matrixMultiply( matrix );
	for( int i = 0; i < 2; ++i )
	{
		for( int j = 0; j < 2; ++j )
			std::cout << matrix[i][j] << " ";

		std::cout << "\n";
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog17_2__2()
KOD:
{
	std::array<std::array<int, 3>, 3> matrix = { {{{ 2, 1, 1 }},
											   {{ 2, 2, 2 }},
											   {{ 2, 1, 1 }}} };
	matrixMultiply( matrix, 5 );
	for( int i = 0; i < 3; ++i )
	{
		for( int j = 0; j < 3; ++j )
			std::cout << matrix[i][j] << " ";

		std::cout << "\n";
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog17_2__3()
KOD:
{
	std::cout << "vec2x2:\n";
	size_t x = 3;
	size_t y = 2;

	int niz[6] = { 2, 1, 1,
				  1, 1, 1 };

	std::vector<int> matricaRez = matrixMultiply( matrica_t{ x, y, niz }, matrica_t{ y, x, niz } );
	for( int i = 0; i < y; ++i )
	{
		for( int j = 0; j < y; ++j )
			std::cout << matricaRez[i * y + j] << " ";

		std::cout << "\n";
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog17_5()
KOD:
{
	char str[] = "tesaaaaaaaat\0";
	char noviStr[10];
	moj_memcpy( str, noviStr, 10 );
	std::cout << "novi string: " << noviStr << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog18_1()
KOD:
{
	Razlomak raz1( 1, 3, '+' );
	Razlomak raz2( 3, 8, '=' );
	Razlomak rezultat = raz1 + raz2;
	std::cout << raz1 << raz2 << rezultat;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog18_2()
KOD:
{
	Decimal dec;
	dec.setBase( 500000 );
	dec.setDecimal( -15 );
	std::cout << dec << '\n';
	dec.setBase( 16 );
	dec.setDecimal( 32 );
	std::cout << dec;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog18_4()
KOD:
{
	Time t1( 0, 0, 59, 0 );
	Time t2( 0, 25, 3, 1 );
	Time t3 = t1 - t2;
	std::cout << "  " << t1
		<< "- " << t2
		<< "----------------------\n"
		<< t3;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog19_1()
KOD:
{
	StringDouble sd1( "5.55" );
	StringDouble sd2( "2" );
	std::cout << sd1 << "+ " << sd2 << "= " << sd1 + sd2 << '\n'
		<< sd1 << "- " << sd2 << "= " << sd1 - sd2 << '\n'
		<< sd1 << "* " << sd2 << "= " << sd1 * sd2 << '\n'
		<< sd1 << "/ " << sd2 << "= " << sd1 / sd2 << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog21_1()
KOD:
{
	Checkbook* cb = new Checkbook;
	cb->total();
	cb->addItem( 1 );
	cb->addItem( 2 );
	cb->addItem( 3 );
	cb->addItem( 4 );
	cb->addItem( 5 );
	cb->addItem( 6 );
	cb->addItem( 7 );
	//cb->addItem( 8 );
	//cb->addItem( 9 );
	//cb->addItem( 10 );
	//cb->addItem( 11 );
	//cb->addItem( 12 );
	//cb->addItem( 13 );
	//cb->addItem( 14 );
	std::array<int, 10> items = static_cast<Queue*>( cb )->get10();
	for( const auto& item : items )
		std::cout << item << "\n";
	delete cb;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog21_2()
KOD:
{
	Word_match wm;
	d_Number_mather nm;
	d_BlankStr_matcher bsm;
	std::cout << "Word_match: 43, was: " << wm.match( "43" ) << wm.match( "was" )
		<< "\nNumber_match 43, was: " << nm.match( "43" ) << nm.match( "was" )
		<< "\nBlankStr_match 43,  , was: " << bsm.match( "43" ) << bsm.match( "  " ) << bsm.match( "was" );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog21_3()
KOD:
{
	d_Krug krug( 4 );
	d_Kvadrat kvad( 4 );
	d_Trokut trok( 4, 4 );
	std::cout << "Krug: " << krug.v_povrsina()
		<< "\nKvad: " << kvad.v_povrsina()
		<< "\nTrok: " << trok.v_povrsina() << "\n";
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog21_5()
KOD:
{
	d_Dek dek( 42 );
	d_Okt okt( 8 );
	d_Hex hex( 16 );
	dek.print_it();
	okt.print_it();
	hex.print_it();

}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog22_4()
KOD:
{
	count_letter( "HelloWorld" );
	count_letter( "Hello World" );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog23_1()
KOD:
{
	PageFormatting pf;
	std::string input;
	input.reserve( 32 );
	std::cout << "Unesi ime datoteke: ";
	std::getline( std::cin, input );
	pf.open_file( input.c_str() );
	std::cout << "Unesi naslov datoteke: ";
	std::getline( std::cin, input );
	pf.page();

	pf.define_header( input.c_str() );
	pf.define_header( input.c_str() );
	std::cout << "Unesi tekst:\n";
	std::getline( std::cin, input );
	pf.print_line( input.c_str() );
	pf.print_line( input.c_str() );
	pf.page();
	pf.print_line( input.c_str() );
	pf.print_line( input.c_str() );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog23_2()
KOD:
{
	std::array<const char*, 5> imenaDatoteka = { {{"Time.cpp"}, {"test"}, {"aaaaaaa"}, {"raznoMain.cpp"}, {"razno.hpp"} } };
	std::fstream datoteka = search_open( imenaDatoteka );
	std::string stream;
	stream.reserve( 256 );
	if( datoteka.is_open() )
	{
		while( std::getline( datoteka, stream ) )
		{
			std::cout << stream << '\n';
		}
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog23_3()
KOD:
{
	SymbolTable st;
	st.enter( "test" );
	st.enter( "test" );
	st.enter( "test2" );
	st.enter( "test" );
	std::cout << ( st.lookup( "test" ) ? "Nasao sam test\n" : "Nema ga :(\n" );
	st.remove( "test" );

	std::cout << ( st.lookup( "test" ) ? "Nasao sam test\n" : "Nema ga :(\n" );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog24_1()
KOD:
{
	std::cout << "min(2, 5): " << min( 2, 5 )
		<< "\nmin(2.5, 1.05): " << min( 2.5, 1.05 )
		<< "\nmin('a', 'A'): " << min( 'a', 'A' )
		<< "\nmin(\"aA\", \"Aa\"): " << min( "aA\0", "Aa\0" ) << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog26_1()
KOD:
{
	std::string imeDatoteke{};
	std::cout << "Unesi ime datoteke: ";
	std::cin >> imeDatoteke; // npr. raznoMain.cpp
	std::cout << haveDoubleWords( imeDatoteke );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog26_3()
KOD:
{
	Mail_label test( "7", "t", "e", "S", "t" );
	Mail_label test2( "6", "t", "e", "S", "t" );
	Mail_label test3( "2", "t", "e", "S", "t" );
	Mail_label test4;
	std::cin >> test4;
	List* head = new List( test );
	List* el2 = new List( test2 );
	List* el3 = new List( test3 );
	List* el4 = new List( test4 );
	head->insert( el2 );
	el2->insert( el3 );
	el3->insert( el4 );
	std::cout << "HEAD:\n" << head->getContent()
		<< "EL2:\n" << el2->getContent()
		<< "EL3:\n" << el3->getContent()
		<< "EL4:\n" << el4->getContent();
	List::sortByID( head );
	std::cout << "\nSORTED!\nHEAD:\n" << head->getContent()
		<< "EL2:\n" << head->gotoNext()->getContent()
		<< "EL3:\n" << head->gotoNext()->gotoNext()->getContent()
		<< "EL4:\n" << head->gotoNext()->gotoNext()->gotoNext()->getContent();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void PracticalCppProg::pog26_5()
KOD:
{
	const std::string ime = "raznoMain.cpp";
	std::fstream datoteka;
	ispisi_datoteku_u_konzolu( datoteka, ime );
}
--------------------------------
====================================================
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::printSidewaysTriangle()
KOD:
{
	Poglavlje2 pog2;
	pog2.printSidewaysTriangle();
	pog2.printSidewaysTriangleRec();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::luhnFormulaPrecomputed_and_Expression()
KOD:
{
	Poglavlje2 pog2;
	pog2.luhnFormulaPrecomputed();
	pog2.luhnFormulaExpression();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::decodeMessage()
KOD:
{
	Poglavlje2 pog2;
	pog2.decodeMessage();
	std::cout << "\nRjesenje:\n";
	pog2.decodeMessageRjesenje();

	// slova
	// -      -> promijeni mod
	// ' '    -> razmak
	//
	//		  R, -	, i , g ,  h  , t  , -, ? ,' ', -, Y ,-, e,  s  , -, !
	// input: 18,12312,171,763,98423,1208,216,11,500,18,241,0,32,20620,27,10
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj1()
KOD:
{
	Poglavlje2 pog2;
	pog2.vj1();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj2()
KOD:
{
	Poglavlje2 pog2;
	pog2.vj2();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj2version2()
KOD:
{
	Poglavlje2 pog2;
	pog2.vj2_version2();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj3()
KOD:
{
	Poglavlje2 pog2;
	//// input: 9780306406157 (978-0-306-40615-7)
	pog2.vj3();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj5_check()
KOD:
{
	Poglavlje2 pog2;
	pog2.vj5_check();
	//// input: 978030640615 (978-0-306-40615-?)
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj5_generate()
KOD:
{
	Poglavlje2 pog2;
	pog2.vj5_generate();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj6()
KOD:
{
	try
	{
		Poglavlje2 pog2;
		std::cout << pog2.vj6_bin_to_dec() << '\n';
	}
	catch( const char* poruka )
	{
		std::cout << poruka;
	}
	catch( ... )
	{
		std::cout << "--GRESKA!--\n";
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj6_2()
KOD:
{
	Poglavlje2 pog2;
	int bin = pog2.vj6_dec_to_bin();
	pog2.vj6_ispisi_bin( bin );
	////std::cout << bin;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj7()
KOD:
{
	struct testCase
	{							// b									d				h
		int test1 = 0;			// 0									0				0x0
		int test2 = 5;			// 101								5				0x5
		int test3 = -5;			// 11111111111111111111111111111011		-5				0xFFFC
		int test4 = INT32_MIN;	// 10000000000000000000000000000000		-2147483648		0x8000
	};

	Poglavlje2 pog2;
	pog2.vj7_pretvorba_sa_hex();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj8()
KOD:
{
	Poglavlje2 pog2;
////--------------------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>(neg brojevi)
	pog2.vj8_pretvorba_sve_baze();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog2vj9()
KOD:
{
	//test cases :
	//rE,
	//Ree,
	//aaaaaa Uhhhhh,
	//bbboKKK,

	Poglavlje2 pog2;
	std::string str;
	std::cout << "Unesi liniju teksta:\n";
	getline( std::cin, str );
	pog2.vj9_unos_string_info( str );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog3_finding_the_mode()
KOD:
{
	Poglavlje3 pog3;
	pog3.finding_the_mode();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog3_vj1_sorting()
KOD:
{
	Poglavlje3 pog3;
	pog3.vj1_sorting();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog3_highestSales_zadano()
KOD:
{
	Poglavlje3 pog3;
	pog3.highestSales_zadano();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog3_vj2_median()
KOD:
{
	Poglavlje3 pog3;
	pog3.vj2_median();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog3_vj3_issorted()
KOD:
{
	Poglavlje3 pog3;
	std::array<int, 20> niz1{ 5865, 5456, 3983, 6464, 9957, 4785, 3875, 3838, 4959, 1122, 7766, 2534, 23, 55, 67, 99, 265, 376, 232, 223 };
	std::array<int, 20> niz2{ 23, 55, 67, 99, 223, 232, 265, 376, 1122, 2534, 3838, 3875, 3983, 4785, 4959, 5456, 5865, 6464,  7766, 9957 };
	std::cout << "niz1:\n";
	for( const int el : niz1 )	std::cout << el << " "; std::cout << '\n';
	std::cout << ( ( pog3.vj3_issorted( niz1 ) == true ) ? "sortiran\n" : "nije sortiran\n" );
	std::cout << "\nniz2:\n";
	for( const int el : niz2 )	std::cout << el << " "; std::cout << '\n';
	std::cout << ( ( pog3.vj3_issorted( niz2 ) == true ) ? "sortiran\n" : "nije sortiran\n" );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog3_vj4_encode_and_vj5_decode()
KOD:
{
	try
	{
	/// ( za trenutacni nacin kriptiranja znakova )
	/// cipher:		┼ ( ? I ž 0 _ ) = E 5 ! ╣ < ' ╦ $ » ╩ 8 U ▀ ď Ó ─ ╝
	/// slova:		a b c d e f g h i j k l m n o p q r s t u v w x y z
		Poglavlje3 pog3;
		const char* plainText = "roses are red, sky is blue. code is gud and so no need to be pulled.";
		auto encoded = pog3.vj4_cipher_encode( plainText );
		std::cout.setf( std::ios::left ); std::cout.width( 12 ); std::cout << "plainText:" << plainText << '\n';
		std::cout.setf( std::ios::left ); std::cout.width( 12 ); std::cout << "encoded:" << encoded << '\n';

		std::cout << "\nNakon dekriptiranja:\n";

		char cipherText[57];
		strcpy_s( cipherText, encoded.get() );
		auto decode = pog3.vj5_cipher_decode( std::move( encoded ) );
		std::cout.setf( std::ios::left ); std::cout.width( 12 ); std::cout << "cipherText:" << cipherText << '\n';
		std::cout.setf( std::ios::left ); std::cout.width( 12 ); std::cout << "decode:" << decode << '\n';
	}
	catch( const char* str )
	{
		std::cout << str;
	}
	catch( ... )
	{
		std::cout << "--GRESKA--\n";
	}
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog3_vj8_grade_better_than()
KOD:
{
	Poglavlje3 pog3;
	const auto rezultati = pog3.vj8_grade_better_than();
	std::cout << "Od trazenog ucenika bolji je postotak studenata sa sljedecim ocjenama:\n"
		<< "25%: " << static_cast<uint8_t>( rezultati[0] != UINT8_MAX ? ( rezultati[0] + 'A' ) : '\\' ) << '\n'
		<< "50%: " << static_cast<uint8_t>( rezultati[1] != UINT8_MAX ? ( rezultati[1] + 'A' ) : '\\' ) << '\n'
		<< "75%: " << static_cast<uint8_t>( rezultati[2] != UINT8_MAX ? ( rezultati[2] + 'A' ) : '\\' ) << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog3_vj9_modified_median()
KOD:
{
	Poglavlje3 pog3;
	pog3.vj9_modified_median();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_osnovne_operacije_stringa()
KOD:
{
	Poglavlje4 pog4;
	const char* string = "";
	std::cout << "string: " << string;
	std::cout << "\nAppendig \"a\"\n";
	pog4.append( string, 'a' );
	std::cout << "string: " << string << '\n';
	std::cout << "Concatenating \" test\"\n";
	pog4.concatenate( string, " test" );
	std::cout << "string: " << string << '\n';
	std::cout << "\nAppendig \".\"\n";
	pog4.append( string, '.' );
	std::cout << "string: " << string << '\n';
	std::cout << "Concatenating \" This is\"\n";
	pog4.concatenate( string, " This is." );
	std::cout << "string: " << string << '\n';
	std::cout << "\n";
	std::cout << "string sa characterAt funkcijom:\n";
	for( std::pair<uint8_t, const char*> data = { 1, string }; *data.second != '\0'; ++data.first, ++data.second )
		std::cout << pog4.characterAt( string, data.first ) << '\n';
	delete[] string;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_prosjek_ocjena_studenata()
KOD:
{
	Poglavlje4 pog4;
	Poglavlje4::StudentRecord* record = nullptr;
	pog4.addRecord( record, { 1, 'A' } ); // 1
	pog4.addRecord( record, { 1, 'B' } ); // 2
	pog4.addRecord( record, { 1, 'C' } ); // 6
	pog4.addRecord( record, { 1, 'F' } ); // 6
	pog4.addRecord( record, { 3, 'C' } ); // 3
	pog4.addRecord( record, { 3, 'E' } ); // 5
	pog4.addRecord( record, { 3, 'E' } ); // 5
	pog4.addRecord( record, { 3, 'E' } ); // 5
	pog4.addRecord( record, { 3, 'E' } ); // 5
	std::cout << "Prosjek ocjena u rekordu je: " << static_cast<char>( pog4.averageRecord( record ) ) << '\n';
	delete record;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_vj1()
KOD:
{
	Poglavlje4 pog4;
	pog4.vj1_(); ///////////////////////////////////////////////////////////////////////////////////////// TODO	pogledaj za zadatak koji se moze rjesit sa dinamicnom memorijom
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_vj2_jos_operacija_nad_stringom()
KOD:
{
	Poglavlje4 pog4;
	const char* test1 = "\0";
	const char* sub1 = pog4.vj2_sub_string( test1, 0, 5 );
	const char* sub2 = pog4.vj2_sub_string( test1, 5, 2 );
	const char* sub3 = pog4.vj2_sub_string( test1, 0, 1 );
	std::cout << "test1: \"" << sub1 << "\"" << ", " << "\"" << sub2 << "\"" << ", " << "\"" << sub3 << "\"\n";
	const char* test2 = "test2";
	const char* sub4 = pog4.vj2_sub_string( test2, 0, 5 );
	const char* sub5 = pog4.vj2_sub_string( test2, 3, 2 );
	const char* sub6 = pog4.vj2_sub_string( test2, 0, 1 );
	const char* sub7 = pog4.vj2_sub_string( test2, 4, 3 );
	const char* sub8 = pog4.vj2_sub_string( test2, -1, 3 );
	std::cout << "test2: \"" << sub4 << "\"" << ", " << "\"" << sub5 << "\"" << ", " << "\"" << sub6 << "\"" << ", " << "\"" << sub7 << "\"" << ", " << "\"" << sub8 << "\"\n";
	delete[] sub1, delete[] sub2, delete[] sub3, delete[] sub4, delete[] sub5, delete[] sub6, delete[] sub7, delete[] sub8;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_myCharPtr_klasa_testiranje()
KOD:
{
	Poglavlje4 pog4;
	Poglavlje4::myCharptr string1( 12, "Konstruktor!" ), string2( 14, "Konstruktor2!a" );
	std::cout << "string1: " << string1 << '\n';
	std::cout << "string2: " << string2 << '\n';
	Poglavlje4::myCharptr string3( string1 );
	std::cout << "string3(copy konstruktor string1): " << string3 << ", string1: " << string1 << '\n';
	Poglavlje4::myCharptr string4( std::move( string2 ) );
	std::cout << "string4(move konstruktor string2): " << string4 << '\n';
	std::cout << "string2(nakon move): " << string2 << '\n';
	string1 = string3;
	std::cout << "string1(nakon =string3): " << string1 << ", string3: " << string3 << '\n';
	string3 = std::move( string1 );
	std::cout << "string3 mov =string1: " << string3 << ", string1: " << string1 << '\n';
	//////
	pog4.vj4_append( string1, 'a' ); pog4.vj4_append( string1, 'p' ); pog4.vj4_append( string1, 'p' ); pog4.vj4_append( string1, 'e' ); pog4.vj4_append( string1, 'n' ); pog4.vj4_append( string1, 'd' );
	pog4.vj4_concatenate( string2, "concatenate" );
	uint8_t len = std::max( { string1.getLength(), string2.getLength(), string3.getLength(), string4.getLength() } );
	for( uint8_t i = 1; i <= len; ++i )
		std::cout << pog4.vj4_characterAt( string1, i ) << '\t' << pog4.vj4_characterAt( string2, i ) << '\t' << pog4.vj4_characterAt( string3, i ) << '\t' << pog4.vj4_characterAt( string4, i ) << '\n' << '\n';
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_vj4_dodavanje_and_vj5_uklananje_studentkih_rekorda()
KOD:
{
	Poglavlje4 pog4;
	Poglavlje4::StudentRecord* record = nullptr;
	pog4.addRecord( record, { 1, 'A' } ); // 1
	pog4.addRecord( record, { 1, 'B' } ); // 2
	pog4.addRecord( record, { 1, 'C' } ); // 6
	char kriterij;
	uint8_t mode;
	std::cout << "Unesi po kojem kriteriju zelis uklonit iz rekorda: ";
	std::cin >> kriterij;	// 1
	std::cout << "Unesi koji mode zelis(0-> ID, 1-> ocjena): ";
	std::cin >> mode;	// 0
	pog4.vj5_remove_record( record, kriterij, mode );
	std::cout << "Unesi po kojem kriteriju zelis uklonit iz rekorda: ";
	std::cin >> kriterij;	// 'C'
	std::cout << "Unesi koji mode zelis(0-> ID, 1-> ocjena): ";
	std::cin >> mode;	// 1
	pog4.vj5_remove_record( record, kriterij, mode );
	std::cout << "Unesi po kojem kriteriju zelis uklonit iz rekorda: ";
	std::cin >> kriterij;	// 'A'
	std::cout << "Unesi koji mode zelis(0-> ID, 1-> ocjena): ";
	std::cin >> mode;	// 1
	pog4.vj5_remove_record( record, kriterij, mode );
	delete record;
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_vj6()
KOD:
{
	struct StringLLAdv advNode = testVal1();
	std::cout << "nakon append advNode:\n";
	for( int i = 0; i < advNode.head.slovo; ++i )
		std::cout << StringLinkedList::vj6_characterAt( advNode, i ) << '\n';
	StringLinkedList::del( advNode );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_vj7()
KOD:
{
	StringLLAdv advNode = testVal1();
	StringLLAdv advNode2 = testVal2();
	StringLinkedList::vj7_concatenate( advNode, advNode2 );
	std::cout << "\nnakon contatenate advNode:\n";
	for( int i = 0; i < advNode.head.slovo; ++i )
		std::cout << StringLinkedList::vj6_characterAt( advNode, i ) << '\n';
	StringLinkedList::del( advNode );
	StringLinkedList::del( advNode2 );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_vj8()
KOD:
{
	StringLLAdv advNode = testVal1();
	StringLLAdv advNode2 = testVal2();
	StringLinkedList::vj7_concatenate( advNode, advNode2 );
	std::cout << "\nnakon contatenate advNode:\n";
	StringLinkedList::vj8_rmvchar( advNode, 5, 3 );
	std::cout << "\nnakon rmvchar advNode:\n";
	for( int i = 0; i < advNode.head.slovo; ++i )
		std::cout << StringLinkedList::vj6_characterAt( advNode, i ) << '\n';
	StringLinkedList::vj8_rmvchar( advNode, 0, 2 );
	std::cout << "\nnakon rmvchar advNode:\n";
	for( int i = 0; i < advNode.head.slovo; ++i )
		std::cout << StringLinkedList::vj6_characterAt( advNode, i ) << '\n';
	StringLinkedList::vj8_rmvchar( advNode2, 1, 3 );
	std::cout << "\nnakon rmvchar advNode2:\n";
	for( int i = 0; i < advNode2.head.slovo; ++i )
		std::cout << StringLinkedList::vj6_characterAt( advNode2, i ) << '\n';
	StringLinkedList::vj8_rmvchar( advNode2, 0, 1 );
	std::cout << "\nnakon rmvchar advNode2:\n";
	for( int i = 0; i < advNode2.head.slovo; ++i )
		std::cout << StringLinkedList::vj6_characterAt( advNode2, i ) << '\n';
	StringLinkedList::del( advNode );
	StringLinkedList::del( advNode2 );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_vj9()
KOD:
{
//inp: 12233344445555566666677777778888888899999999910101010101010101010
	std::cout << "Unesi bilo koji pozitivan broj: ";
	StringLLAdv advNode = StringLinkedList::vj9_intToList();
	std::cout.width( 33 );  std::cout.setf( std::ios::left ); std::cout << "\nBroj unutar advNode: ";
	for( int i = 0; i < advNode.head.slovo; ++i )
		std::cout << StringLinkedList::vj6_characterAt( advNode, i );
	StringLinkedList::del( advNode );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog4_vj10()
KOD:
{
	std::cout << "Unesi bilo koji pozitivan broj: ";
	StringLLAdv advNode = StringLinkedList::vj9_intToList();
	std::cout << "\nUnesi bilo koji pozitivan broj: ";
	StringLLAdv advNode2 = StringLinkedList::vj9_intToList();
	std::cout << "\nadvNode + advNode2 = ";
	StringLLAdv advNodeRez = StringLinkedList::vj10_add_2_int_lists( advNode, advNode2 );
	for( int i = 0; i < advNodeRez.head.slovo; ++i )
		std::cout << StringLinkedList::vj6_characterAt( advNodeRez, i );
	StringLinkedList::del( advNode );
	StringLinkedList::del( advNode2 );
	StringLinkedList::del( advNodeRez );
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog5_vj1()
KOD:
{
	Poglavlje5 pog5;
	pog5.vj_studentRecords();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog5_zad1()
KOD:
{
	Poglavlje5 pog5;
	pog5.zad1_printCarInfo();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog5_zad2()
KOD:
{
	Poglavlje5 pog5;
	pog5.zad2_printCarsAge();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog5_zad3_i_4()
KOD:
{
	Poglavlje5 pog5;
	pog5.zad3i4_myCharPtr_class();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog5_zad5()
KOD:
{
	Poglavlje5 pog5;
	pog5.zad5_remove();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_vj1()
KOD:
{
	Poglavlje6 pog6;
	pog6.vj1_parrots();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_vj2()
KOD:
{
	Poglavlje6 pog6;
	pog6.vj2_salary();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_vj3()
KOD:
{
	Poglavlje6 pog6;
	pog6.vj3_sum();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_vj4()
KOD:
{
	Poglavlje6 pog6;
	pog6.vj4_count_negative_numbers();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_vj5()
KOD:
{
	Poglavlje6 pog6;
	pog6.vj5_biggest_num_tree();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_zad1()
KOD:
{
	Poglavlje6 pog6;
	pog6.zad1_sum_of_positive_numbers();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_zad2()
KOD:
{
	Poglavlje6 pog6;
	pog6.zad2_binary_str_even_odd();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_zad3()
KOD:
{
	Poglavlje6 pog6;
	pog6.zad3_target_appeard();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_zad4()
KOD:
{
	Poglavlje6 pog6;
	pog6.zad4_tree_is_heap();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_zad5()
KOD:
{
	Poglavlje6 pog6;
	pog6.zad5_is_binary_search_tree();
}
--------------------------------
TEKST ZADATKA: 
DEKLARACIJA: void ThinkLAP::pog6_zad6()
KOD:
{
	Poglavlje6 pog6;
	pog6.zad6_insert_value_in_binary_search_tree();
}
--------------------------------
====================================================
