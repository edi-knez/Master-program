{"projekt":[{"C++ knjiga":{"Broj cjeline":[{"Cjelina1":{"Zadaci":[{"deklaracija":"void Cjelina1::zad4_kvadrat()","kod":"{\n\tusing std::cout;\n\tdouble x = 5.5;\n\tdouble x2 = _kvadPovrsina( x );\t\t// kvadriraj x\t\tda dobijes x^2\n\tdouble x4 = _kvadPovrsina( x2 );\t// kvadriraj x^2\tda dobijes x^4\n\tcout << \"x: \" << x << '\\n';\n\tcout << \"x2: \" << x2 << '\\n';\n\tcout << \"x4: \" << x4 << '\\n';\n}","tekst":"<summary>\nIspisi i izracunaj x, x^2, x^4\n</summary>"},{"deklaracija":"void Cjelina1::zad5_ispis()","kod":"{\n\tusing std::cout;\n\tcout << \"\\nI like to write \\n before I've read it. \\n\\n\";\n\tcout << \"Then, with my pen, I always edit.\\n\";\n\tcout << \"But, with computer\\s, now I type \";\n\tcout << \"and never, ever get it right.\\n\";\n}","tekst":""},{"deklaracija":"void Cjelina1::vj1_2datoteke()","kod":"{\n\tstd::cout << \"Ovo je moj C++ program\\n\";\n\tz121_datoteka();\n}","tekst":""},{"deklaracija":"void Cjelina1::vj3_krug()","kod":"{\n\tdouble r, kvadrat, area;\n\tr = 2;\n\tkvadrat = r * r;\n\tarea = kvadrat * 3.14;\n\tstd::cout << \"Povrsina kruga = \" << area << \" m\" << std::endl;\n}","tekst":""}]}},{"Cjelina10":{"Zadaci":[{"deklaracija":"void Cjelina10::zad1()","kod":"{\n    /*   LP* a = new LP;\n   CD* b = new CD;\n   DVD* c = new DVD;\n\n   a->ispis();\n   b->ispis();\n   c->ispis();\n\n   delete a, b, c;*/\n\n    LP* a = new LP;\n    CD* b = new CD;\n    DVD* c = new DVD;\n    Ploca* A[3];\n\n    A[0] = a;\n    A[1] = b;\n    A[2] = c;\n\n    for (int i = 0; i < 3; i++) {\n        A[i]->_ispisi();\n    }\n\n    delete A[0], A[1], A[2];\n}","tekst":""},{"deklaracija":"void Cjelina10::zad2()","kod":"{\n    Roditelj* a = new Roditelj(\"Janko\", 1);\n    Dijete* b = new Dijete(\"Ana\", true);\n    Clan_obitelji* c[2];\n\n    c[0] = a;\n    c[1] = b;\n\n    for (int i = 0; i < 2; i++)  c[i]->_ispis();\n\n    for (int i = 0; i < 2; i++)  delete c[i];\n\n}","tekst":""}]}},{"Cjelina2":{"Zadaci":[{"deklaracija":"void Cjelina2::zad1()","kod":"{\n    int r;\n    double rDouble;\n\n    r = 2;\n    rDouble = 2.7;\n\n    ispis(r);\n    ispis(rDouble);\n}","tekst":""},{"deklaracija":"void Cjelina2::zad2()","kod":"{\n    Krug k;\n    Krug* k2 = new Krug;\n    double d;\n\n    d = 1.3;\n    k.SetRadijus(d);\n    k = d;\n\n    std::cout << \"Radijus kruga: \" << k.getRadijus() << '\\n';\n    delete k2;\n}","tekst":""},{"deklaracija":"void Cjelina2::zad3()","kod":"{\n    using std::cout;\n    Krug k1;\n    Krug k2;\n    double d;\n    Krug k3;\n    //k3.radijus = 2;\n    k3.SetRadijus(2);\n    Krug k4;\n    //k4.radijus = -2;\n    k4.SetRadijus(-2);\n    cout << \"Upisite radijus prvog kruga: \";\n    std::cin >> d;\n    //k1.radijus = d;\n    k1.SetRadijus(d);\n    cout << \"Upisi radijus drugog kruga: \";\n    std::cin >> d;\n    //k2.radijus = d;\n    k2.SetRadijus(d);\n\n    cout << \"Povrsina prvog kruga: \" << k1.Povrsina() << std::endl;\n    cout << \"Povrsina drugog kruga \" << k2.Povrsina() << std::endl;\n    cout << \"Povrsina 3. kruga: \" << k3.Povrsina() << std::endl;\n    cout << \"Povrsina 4. kruga \" << k4.Povrsina() << std::endl;\n\n}","tekst":""},{"deklaracija":"void Cjelina2::zad4()","kod":"{\n    using std::cout;\n    Krug k1;\n    double d;\n    cout << \"Upisi radijus kruga: \";\n    std::cin >> d;\n    k1.SetRadijus(d);\n    cout << \"Radijus kruga je:\\t\" << k1.getRadijus() << std::endl;\n    cout << \"Povrsina kruga je:\\t\" << k1.Povrsina() << std::endl;\n}","tekst":""},{"deklaracija":"void Cjelina2::zad5()","kod":"{\n    Razlomak raz;\n    int br, nz;\n    std::cout << \"Upisi Brojnik pa nazivnik: \";\n    std::cin >> br >> nz;\n\n    if (raz.Set(br, nz))\n        std::cout << \"Vrijednost razlomka je: \" << raz.GetDecimal() << '\\n';\n    \n}","tekst":""},{"deklaracija":"void Cjelina2::zad6()","kod":"{\n    std::string naziv = \"Objektno orijentirano programiranje\";\n    std::string noviStr;\n    std::cin >> noviStr;\n    std::cout << '\\n' << naziv << '\\n';\n    naziv = noviStr;\n    std::cout << naziv << '\\n';\n\n    std::cout << \"duljina stringa je: \" << naziv.length() << '\\n';\n}","tekst":""}]}},{"Cjelina3":{"Zadaci":[{"deklaracija":"void Cjelina3::zad1()","kod":"{\n\tdouble rad, pPov, refPov;\n\tdouble povrsina, opseg;\n\n\tstd::cout << \"Upisi radijus kruga: \";\n\tstd::cin >> rad;\n\n\tstd::cout << \"Povrsina kruga = \" << povrsinaVrijednost( rad ) << \" m2\\n\";\n\n\tpovrsinaPokazivac( rad, &pPov );\n\tstd::cout << \"Povrsina kruga (pok)= \" << pPov << \" m2\\n\";\n\n\tpovrsinaReferenca( rad, refPov );\n\tstd::cout << \"Povrsina kruga (ref)= \" << refPov << \" m2\\n\";\n\n\tpovrsinaOpseg( povrsina, opseg, rad );\n\tstd::cout << \"Radijus: \" << rad << \"\\nPovrsina = \" << povrsina << \" m2\\n\" << \"Opseg = \" << opseg << \" m2\\n\";\n}","tekst":""},{"deklaracija":"void Cjelina3::zad3()","kod":"{\n\tfloat width = 2.5, height = 3.1, area = 0.0;\n\trect_area( width, height, area );\n\tstd::cout << \"Povrsina pravokutnika je= \" << area << '\\n';\n}","tekst":""},{"deklaracija":"void Cjelina3::zad4()","kod":"{\n\tusing std::cin; using std::cout;\n\tuint32_t izbor = 0;\n\tfloat opseg;\n\tcout << \"Upisi broj:\\n1 - za opseg trokuta\\n2 - za opseg kvadrata\\n3 - za opseg kruga\\n\";\n\tcin >> izbor;\n\tswitch( izbor )\n\t{\n\tcase 1:\n\t{\n\t\tfloat str1, str2, str3;\n\t\tcout << \"Unesi stranice trokuta: (str1 str2 str3): \";\n\t\tcin >> str1 >> str2 >> str3;\n\t\ttrokut_Opseg( opseg, str1, str2, str3 );\n\t\tcout << \"Opseg trokuta = \" << opseg << '\\n';\n\t\tbreak;\n\t}\n\tcase 2:\n\t{\n\t\tfloat str;\n\t\tcout << \"Unesi stranicu kvadrata: \";\n\t\tcin >> str;\n\t\tkvadrat_Opseg( opseg, str );\n\t\tcout << \"Opseg kvadrata = \" << opseg << '\\n';\n\t\tbreak;\n\t}\n\tcase 3:\n\t{\n\t\tfloat rad;\n\t\tcout << \"Unesi radijus kruga: \";\n\t\tcin >> rad;\n\t\tkrug_Opseg( &opseg, &rad );\n\t\tcout << \"Opseg kruga = \" << opseg;\n\t\tbreak;\n\t}\n\tdefault:\n\t\tcout << \"Pogresan odabir!\";\n\t\tbreak;\n\t}\n}","tekst":""},{"deklaracija":"void Cjelina3::zad5()","kod":"{\n\tRegistracija r1( 534, 234 );\n\tRegistracija r2;\n\tRegistracija r3;\n\tr2.ispisi();\n\tr1.ispisi();\n\tr1.Set( 999, 544 );\n\tr1.ispisi();\n\t//r3.Set(1001, 1000);\n}","tekst":""}]}},{"Cjelina4":{"Zadaci":[{"deklaracija":"void Cjelina4::zad1()","kod":"{\n    Krug k(10);\n\n    std::cout << \"Povrsina: \" << k.izracunajPovrsinu() << '\\n';\n    std::cout << \"Opseg: \" << k.izracunajOpseg() << '\\n';\n}","tekst":""},{"deklaracija":"void Cjelina4::zad3()","kod":"{\n        Tocka t1(1.0, 1.0);\n        Tocka t2(4.0, 1.0);\n\n        std::cout << \"Udaljenost izmedu t1 i t2 = \" << t1.Udaljenost(t2) << '\\n';\n        std::cout << \"Udaljenost izmedu t2 i t1 = \" << t2.Udaljenost(t1) << '\\n';\n}","tekst":""},{"deklaracija":"void Cjelina4::zad4()","kod":"{\n        Tocka2 t1;\n        Tocka2 t2;\n        t1.setTocka(1, 1);\n        t2.setTocka(1, 4);\n\n        std::cout << \"Udaljenost izmedu t1 i t2 = \" << Udaljenost(t1, t2) << '\\n';\n        std::cout << \"Udaljenost izmedu t2 i t1 = \" << Udaljenost(t2, t1) << '\\n';\n}","tekst":""},{"deklaracija":"void Cjelina4::zad5()","kod":"{\n    int i = 0, a = 2, b;\n\n    while (i < 3) {\n        std::cout << (i++ - a == (b = 0));\n    }\n}","tekst":""}]}},{"Cjelina5":{"Zadaci":[{"deklaracija":"void Cjelina5::zad2()","kod":"{\n\tKrug* k = new Krug();\n\tif (k->SetRadijus(1.0))\n\t{\n\t\tstd::cout << \"Povrsina: \" << k->izracunajPovrsinu() << '\\n';\n\t\tstd::cout << \"Opseg: \" << k->izracunajOpseg() << '\\n';\n\t}\n\telse { std::cout << \"Greska\\n\"; }\n\tif (k->SetRadijus(-1.0))\n\t{\n\t\tstd::cout << \"Povrsina: \" << k->izracunajPovrsinu() << '\\n';\n\t\tstd::cout << \"Opseg: \" << k->izracunajOpseg() << '\\n';\n\t}\n\telse { std::cout << \"Greska pri unosu radijusa\\n\"; }\n\n\tdelete k;\n}","tekst":""},{"deklaracija":"void Cjelina5::zad3()","kod":"{\n\tKlNiz kn1;\n\n\tfor (int i = 0; i < 10; i++) {\n\t\tstd::cout << \"A[ \" << i << \"] = \" << kn1[i] << '\\n';\n\t}\n\tstd::cout << \"suma niza: \" << kn1.sumaNiza() << '\\n';\n}","tekst":""}]}},{"Cjelina6":{"Zadaci":[{"deklaracija":"void Cjelina6::zad1()","kod":"{\n    using std::cout;\n    Kompleks a(6.6, 4.7);\n    Kompleks b(2.6, 3.4);\n\n    Kompleks c;\n\n    cout << \"a = \" << a.getReal() << \" + i * \" << a.getImag() << '\\n';\n    cout << \"b = \" << b.getReal() << \" + i * \" << b.getImag() << '\\n';\n\n    c = a + b;\n\n    cout << \"c = a + b\" << '\\n';\n    cout << \"c = \" << c.getReal() << \" + i * \" << c.getImag() << '\\n';\n\n    c = a - b;\n\n    cout << \"c = a - b\" << '\\n';\n    cout << \"c = \" << c.getReal() << \" + i * \" << c.getImag() << '\\n';\n}","tekst":""},{"deklaracija":"void Cjelina6::zad2()","kod":"{\n    using std::cout; using std::cin;\n    Kompleks a, b;\n\n    cout << \"Upisite 2 kompleksna broja (dva para vrijednosti): \" << '\\n';\n\n    cin >> a;\n    cin >> b;\n\n    cout << \"Upisali ste brojeve\" << '\\n';\n    cout << \"a = \" << a.getReal() << \" + i * \" << a.getImag() << '\\n';\n    cout << \"b = \" << b.getReal() << \" + i * \" << b.getImag() << '\\n';\n\n    if (a < b) {\n        cout << \"a je manji od b!\" << '\\n';\n    }\n    else {\n        cout << \"a je veci ili jednak c!\" << '\\n';\n    }\n\n    Kompleks c;\n\n    c = a;\n\n    cout << \"c = \" << c.getReal() << \" + i * \" << c.getImag() << '\\n';\n\n    c.setReal(3.0);\n    cout << \"c = \" << c.getReal() << \" + i * \" << c.getImag() << '\\n';\n\n    if (c > a) {\n        cout << \"c je veci od a!\" << '\\n';\n    }\n    else {\n        cout << \"c je manji ili jednak a!\" << '\\n';\n    }\n\n    c += a;\n    cout << \"c = \" << c.getReal() << \" + i * \" << c.getImag() << '\\n';\n}","tekst":""},{"deklaracija":"void Cjelina6::zad3()","kod":"{\n    using std::cout;\n\n    int arr[] = { 1, 2, 3, 4, 5 };\n    int arr2[] = { 1, 2, 3, 4, 5, 6 };\n    //iarray d;\n    iarray i1{};\n    iarray i2(arr, 5);\n    iarray i3(i2);\n\n    cout << \"i1:\\t\" << i1.size() << '\\n';\n    cout << \"i2:\\t\" << i2.size() << '\\n';\n    cout << \"i3:\\t\" << i3.size() << '\\n';\n\n    i3 += 2;\n    i2 += 5;\n    cout << \"i2:\\t\" << i2.size() << '\\n';\n    cout << \"i3:\\t\" << i3.size() << '\\n';\n\n    i3 = iarray(arr2, 6);\n    std::cout << \"i3:\\t\" << i3.size() << '\\n';\n}","tekst":""},{"deklaracija":"void Cjelina6::zad4()","kod":"{\n    int i = 0;\n    int p;\n    double b, r;\n\n    std::cout << \"Upisi bazu: \";\n    std::cin >> b;\n    std::cout << \"Upisi potenciju: \";\n    std::cin >> p;\n\n    r = rekurzija(p, b);\n\n    std::cout << b << \" na \" << p << \" je: \" << r << '\\n';\n}","tekst":""}]}},{"Cjelina7":{"Zadaci":[{"deklaracija":"void Cjelina7::zad1()","kod":"{\n\t//// napravi datoteku i popuni je gradovima\n\t//std::ofstream out_file(\"cities.txt\");\n\n\t//out_file << \"Atlanta\" << \" \" << \"Baltimore\";\n\t//out_file << \" \" << \"Cincinnati\" << \" \" << \"Dallas\";\n\t//out_file << \" \" << \" \" << \"zzz\" << \" \" << \"zzz\";\n\n\t//out_file.close();\n\n\n\n\tstd::ifstream in_file(\"cities.txt\", std::ios::in);\n\tstd::ofstream filter(\"filter.txt\", std::ios::out | std::ios::trunc);\n\tchar c;\n\tstd::string result = \"\";\n\t// dohvati karakter\n\twhile (in_file.get(c))\n\t{\n\t\t// grad je spremljen u varijabli\n\t\tif (c == ' ')\n\t\t{\n\t\t\tif (result != \"zzz\" && result != \"\")\t// ako se nalazi deliminator zzz ili je varijabla prazna, preskoci taj input\n\t\t\t\tfilter << result << \"\\n\";\n\n\t\t\tresult = \"\";\t// resetiraj string\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult += c;\n\t}\n}","tekst":""},{"deklaracija":"void Cjelina7::zad2()","kod":"{\n    //kompleks a, b;\n//std::cout << \"Upisite 2 kompleksna broja (dva para vrijednosti): \\n\";\n//std::cin >> a;\n//std::cin >> b;\n\n//std::cout << \"Upisali ste brojeve\\n\";\n//std::cout << a;\n//std::cout << b;\n\n//if (a < b)\n//    std::cout << \"a je manji od b!\\n\";\n//else\n//    std::cout << \"a je veci od b!\\n\";\n\n    Kompleks A[1000];\n    int i;\n    // izracunaj i zapisi u memoriju\n    for (i = 0; i < 1000; ++i)\n    {\n        A[i].setReal(sqrt(static_cast<float>(i)));\n        A[i].setImag(A[i].getReal());\n    }\n\n    // zapisi u datoteku iz memorije\n    std::ofstream fTxt(\"kompleks.txt\");\n    for (i = 0; i < 1000; ++i)\n        fTxt << A[i] << std::endl;\n    fTxt.close();\n\n    // zapisi u binarnom obliku\n    std::ofstream fBin(\"kompleks.bin\", std::ios::binary);\n    fBin.write(reinterpret_cast<char*>(A), 1000 * sizeof(Kompleks));\n    fBin.close();\n\n    Kompleks B[1000];\n    std::stringstream ss;\n    std::ifstream bin_ulaz(\"kompleks.bin\", std::ios::in | std::ios::binary);\n    if (bin_ulaz)\n    {\n        // zapisi u memoriju iz binarne datoteke\n        bin_ulaz.read(reinterpret_cast<char*>(&B), 1000 * sizeof(Kompleks));\n        bin_ulaz.close();\n        std::cout << \"Citanje iz kompleks.bin:\\n\";\n        for (i = 0; i < 1000; ++i)\n            ss << B[i];\n        std::cout << ss.view();\n        std::cout << \"\\t\\tEND\\n\";\n    }\n}","tekst":""},{"deklaracija":"void Cjelina7::zad4()","kod":"{\n    std::ifstream datoteka(\"datoteka.txt\", std::ios::in);\n    //pisi_u_consolu_iz_datoteke(datoteka);\n    pisi_u_consolu_iz_datoteke(\"datoteka\", \"dat\");\n\n}","tekst":""}]}},{"Cjelina8":{"Zadaci":[{"deklaracija":"void Cjelina8::zad1()","kod":"{\n\t// C\n\tchar ime[50] = \"Ivan\";\n\tchar prezime[50] = \"Peras\";\n\tchar ImePrezime[100] = \"\";\n\tchar kopija[100] = \"\";\n\n\t// C++\n\tusing std::string; using std::cout;\n\tstring sIme = \"Ivan\";\n\tstring sPrezime = \"Peras\";\n\tstring sImePrezime = \"\";\n\tstring sKopija = \"\";\n\n\tcout << \"Kopiranje:\\n\";\n\n\tstrcpy_s( ImePrezime, ime );\n\tcout << \"C:\\t\" << ImePrezime << '\\n';\n\n\tsImePrezime = sIme;\n\tcout << \"C++:\\t\" << sImePrezime << '\\n';\n\n\tcout << \"Spajanje:\\n\";\n\n\tstrcat_s( ImePrezime, \" \" );\n\tstrcat_s( ImePrezime, prezime );\n\tcout << \"C:\\t\" << ImePrezime << '\\n';\n\n\tsImePrezime = sImePrezime + \" \" + sPrezime;\n\tcout << \"C++:\\t\" << sImePrezime << '\\n';\n\n\tcout << \"Mjerenje duljine:\\n\";\n\n\tcout << \"C:\\t\" << strlen( ImePrezime ) << '\\n';\n\n\tcout << \"C++:\\t\" << sImePrezime.length() << '\\n';\n\n\tcout << \"Usporedba:\\n\";\n\n\tcout << \"C:\\t\" << !strcmp( ImePrezime, ime ) << '\\n';\n\n\tcout << \"C++:\\t\" << ( sImePrezime == sIme ) << '\\n';\n\n\n}","tekst":""},{"deklaracija":"void Cjelina8::zad2()","kod":"{\n\tusing std::cout; using std::cin; using std::vector;\n\tvector<double> vec;\n\tvector<double> revVec;\n\tdouble val;\n\n\tcout << \"Unos proizvoljnog niza brojeva u vektor.\\n\";\n\tcout << \"Unos zavrsava kada se otkuca neko slovo!\\n\";\n\n\twhile( cin >> val )\n\t{\n\t\tvec.push_back( val );\n\t}\n\tcin.clear();\t// ocisti failbit zastavicu\n\tcin.ignore();\t// ignoriraj zadnji pritisnuti enter\n\tdouble sum = 0;\n\n\tfor( vector<double>::const_iterator it = vec.begin(); it != vec.end(); it++ )\n\t{\n\t\tsum += *it;\n\t}\n\n\tfor( int i = vec.size() - 1; i > -1; i-- )\n\t{\n\t\trevVec.push_back( vec[i] );\n\t}\n\n\tdouble avg = sum / vec.size();\n\n\tcout << \"Suma od \" << vec.size()\n\t\t<< \" elemenata: \" << sum\n\t\t<< \". Srednja vrijednost: \" << avg << '\\n';\n\n\tfor( vector<double>::iterator it = revVec.begin(); it != revVec.end(); it++ )\n\t{\n\t\tcout << *it << '\\n';\n\t}\n}","tekst":""},{"deklaracija":"void Cjelina8::zad3()","kod":"{\n\tusing std::cout; using std::string;\n\tint a = 3,\n\t\tb = 5;\n\n\tdouble c = 3.1,\n\t\td = 5.2;\n\n\tcout << \"maximum(int): \" << maximum( a, b ) << '\\n';\n\tcout << \"maximum(double): \" << maximum( c, d ) << '\\n';\n\n\tcout << \"apsolutno a: \" << apsolutnaVrijednost( a ) << '\\n';;\n\tcout << \"apsolutno -6.77: \" << apsolutnaVrijednost( -6.77 ) << '\\n';\n\n\n\tstring s1 = \"bob\",\n\t\ts2 = \"jabuka\",\n\t\ts3 = \"anavolimilovana\";\n\n\tcout << \"palindrom(bob): \" << palindrom( s1 ) << '\\n'\n\t\t<< \"palindrom(jabuka): \" << palindrom( s2 ) << '\\n'\n\t\t<< \"palindrom(anavolimilovana): \" << palindrom( s3 ) << '\\n';\n\n}","tekst":""}]}},{"Cjelina9":{"Zadaci":[{"deklaracija":"void Cjelina9::zad1()","kod":"{\n    using std::cin; using std::cout; using std::string; using std::list;\n    string str;\n    list<string> lst;\n    list<string>::const_iterator it;\n\n    std::ofstream izlaz(\"lista.txt\");\n\n    cin >> str;\n    while (str != \"kraj\") {\n        lst.push_back(str);\n        cin >> str;\n    }\n\n    cout << '\\n';\n    izlaz << \"Lista:\\n\";\n\n    for (it = lst.begin(); it != lst.end(); it++) {\n        cout << *it << '\\n';\n        izlaz << *it << '\\n';\n    }\n    cout << '\\n';\n    izlaz << '\\n';\n\n    lst.reverse();\n    izlaz << \"Obrnuto:\\n\";\n    for (it = lst.begin(); it != lst.end(); it++) {\n        izlaz << *it << '\\n';\n        cout << *it << '\\n';\n    }\n\n    izlaz.close();\n}","tekst":""},{"deklaracija":"void Cjelina9::zad2()","kod":"{\n    using std::vector; using std::cout;\n    int a;\n    vector<int> v;\n    vector<int>::iterator iter;\n\n    std::cin >> a;\n    while (a != 0) {\n        v.push_back(a);\n        std::cin >> a;\n    }\n    cout << '\\n';\n\n    sort(v.begin(), v.end());\n\n    iter = find(v.begin(), v.end(), 55);\n    if (iter != v.end()) {\n        cout << \"iter: \" << *iter << '\\n';\n    }\n    else {\n        cout << \"Not found!\\n\";\n    }\n\n    for (iter = v.begin(); iter != v.end(); iter++) {\n        cout << *iter << '\\n';\n    }\n}","tekst":""},{"deklaracija":"void Cjelina9::zad3()","kod":"{\n    LP* a = new LP;\n    CD* b = new CD;\n    DVD* c = new DVD;\n\n    a->_ispisi();\n    b->_ispisi();\n    c->_ispisi();\n\n    delete a, b, c;\n\n    MP3CD d;\n    d._ispisi();\n}","tekst":""},{"deklaracija":"void Cjelina9::zad4()","kod":"{\n    using std::cout;\n    Tocka2D t1(1, 1);\n    cout << t1.getX() << \", \" << t1.getY() << '\\n';\n\n    Tocka3D t11(2, 2, 2);\n    cout << \"t11\" << t11 << '\\n';\n\n    Tocka3D t12(-2, -2, -2);\n    cout << \"t12\" << t12 << '\\n';\n\n    cout << \"t11\" << t11 << \" == t12\" << t12 << \": \" << t11.operator==(t12) << '\\n';\n\n    /* t12.setX(2);\n     t12.setY(2);\n     t12.setZ(2);*/\n\n    std::cout << \"t12 = t11\\n\";\n    t12 = t11;\n    cout << \"t12\" << t12 << '\\n';\n    cout << \"t11\" << t11 << \" == t12\" << t12 << \": \" << (t11 == t12) << '\\n';\n\n    t12.setZ(3);\n    cout << \"t12\" << t12 << '\\n';\n    cout << \"t11\" << t11 << \" == t12\" << t12 << \": \" << (t11 == t12) << '\\n';\n\n}","tekst":""},{"deklaracija":"void Cjelina9::zad6()","kod":"{\n    O_O_P o1;\n\n    o1.setOcjenuPredavanja(4);\n    o1.setIspraljenaOcjenaPredavanja(5, 0);\n    o1.ispisiOcjenePredavanja();\n}","tekst":""}]}}],"pathToProj":"_Projekti\\C++ knjiga"}},{"FESB":{"Broj cjeline":[{"FESB":{"Zadaci":[{"deklaracija":"void FESB::vj7_1()","kod":"{\n\tchar odabir = { 0 };\n\tint rez, x, y, z;\n\tprintf( \"x = \" );\n\tscanf_s( \"%d\", &x );\n\tprintf( \"y = \" );\n\tscanf_s( \"%d\", &y );\n\tprintf( \"z = \" );\n\tscanf_s( \"%d\", &z );\n\tprintf( \"Unesi slovo za zeljenu operciju:\\na) rez = x + y + z\\nb) rez = x * y * z\\nc) rez = x / y + z\\nd) rez = (x / y - z)na1 / 2\\n\" );\n\tscanf_s( \" %c\", &odabir );\n\tswitch( tolower( odabir ) )\n\t{\n\tcase 'a':\n\t\trez = x + y + z;\n\t\tprintf( \"rez = %d\", rez );\n\t\tbreak;\n\tcase 'b':\n\t\trez = x * y * z;\n\t\tprintf( \"rez = %d\", rez );\n\t\tbreak;\n\tcase 'c':\n\t\trez = x / y + z;\n\t\tprintf( \"rez = %d\", rez );\n\t\tbreak;\n\tcase 'd':\n\t{\n\t\tint temp = sqrt( x / y - z );\n\t\tif( temp < 0 )\n\t\t{\n\t\t\tprintf( \"Greska! izraz je < 0\\n\" );\n\t\t}\n\t\telse\n\t\t{\n\t\t\trez = temp;\n\t\t\tprintf( \"rez = %d\", rez );\n\t\t}\n\t\tbreak;\n\t}\n\tdefault:\n\t\tprintf( \"Greska! krivi unos\\n\" );\n\t\tbreak;\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj7_2()","kod":"{\n\tint Y = 5;\n\tvj7_ispisVrijednostiVarijabla( Y );\n}","tekst":""},{"deklaracija":"void FESB::vj7_3()","kod":"{\n\tint rezultat = vj7_faktorijele( 3 );\n\tprintf( \"Rezultat 3! = %d\\n\", rezultat );\n}","tekst":""},{"deklaracija":"void FESB::vj7_4()","kod":"{\n\tprintf( \"(moj) exp(5): %e\\nexp(5): %e\\n\", vj7_exp( 1, 5 ), exp( 1 ) );\n\tprintf( \"(moj) exp(5): %e\\nexp(5): %e\\n\", vj7_exp( 5, 5 ), exp( 5 ) );\n\tprintf( \"(moj) exp(10): %e\\nexp(10): %e\\n\", vj7_exp( 5, 10 ), exp( 5 ) );\n\tprintf( \"(moj) exp(50): %e\\nexp(50): %e\\n\", vj7_exp( 5, 50 ), exp( 5 ) );\n}","tekst":""},{"deklaracija":"void FESB::vj8_1()","kod":"{\n\tconst int BROJ_ELEMENATA = 6;\n\tint testBroj1 = 4, testBroj2 = 5;\n\tint A[BROJ_ELEMENATA] = { 3, 5, 7, 8, 9, 10 };\n\tprintf( \"niz: \" );\n\tfor( const auto br : A )\n\t\tprintf( \"%d \", br );\n\tprintf( \"\\n\\ntestBroj1(%d) se \", testBroj1 );\n\t( vj8_postoji_li_element( A, BROJ_ELEMENATA, testBroj1 ) ) ? printf( \"nalazi u nizu\\n\" ) : printf( \"ne nalazi u nizu\\n\" );\n\tprintf( \"testBroj2(%d) se \", testBroj2 );\n\t( vj8_postoji_li_element( A, BROJ_ELEMENATA, testBroj2 ) ) ? printf( \"nalazi u nizu\\n\" ) : printf( \"ne nalazi u nizu\\n\" );\n}","tekst":""},{"deklaracija":"void FESB::vj8_2()","kod":"{\n\tconst int vel = 3;\n\tint matricaA[vel][vel];\n\tvj8_unosElemenataMatrice( matricaA, vel );\n\tprintf( \"produkt = %d\", vj8_produktElemenataMatrice( matricaA, vel ) );\n}","tekst":""},{"deklaracija":"void FESB::vj8_3()","kod":"{\n\tconst char* a = { \"ovojekratkitest\" };\n\tprintf( \"my_strlen: %zd\\nstrlen: %zd\\n\", vj8_my_strlen( a ), strlen( a ) );\n\n\tconst char* c = { \"tesktZaKopirat\" };\n\tchar* d = (char*) malloc( vj8_my_strlen( c ) + 1 );\n\tsize_t duljina = strlen( c );\n\tchar* e = (char*) malloc( duljina + 1 );\n\tif( d )\tvj8_my_strcpy( d, c );\n\tif( e )\tstrcpy_s( e, duljina, c );\n\tprintf( \"c: %s\\nd: %s\\ne: %s\", c, d, e );\n}","tekst":""},{"deklaracija":"void FESB::vj8_4()","kod":"{\n\tint n;\n\tprintf( \"Unesi broj: \" );\n\tscanf_s( \"%d\", &n );\n\tprintf( \"%d! = %d\\n\", n, vj8_rekurzija_faktorijele( n ) );\n}","tekst":""},{"deklaracija":"void FESB::vj8_5()","kod":"{\n\tint niz[5] = { 3, 5, 1, 7, 2 };\n\tprintf( \"najmanji element niza je: %d\\n\", vj8_rekurzija_minMax_elementNiza( niz, 4 ) );\n\tprintf( \"najmanji element niza je: %d\\n\", vj8_rekurzija_minMax_elementNiza( niz, 4, false ) );\t// 0 - min, 1 - max\n\tprintf( \"najveci element niza je: %d\\n\", vj8_rekurzija_minMax_elementNiza( niz, 4, true ) );\n}","tekst":""},{"deklaracija":"void FESB::vj8_6()","kod":"{\n\tunsigned int deka;\n\tprintf( \"Unesi dekadski broj: \" );\n\tscanf_s( \"%d\", &deka );\n\tunsigned int baza;\n\tprintf( \"Odaberi sustav u koji zelis pretvorit:\\n2 -> binarni\\n8 -> oktalni\\n16 -> heksadecimalni\\n\\n\" );\n\tscanf_s( \"%d\", &baza );\n\n\tprintf( \"%d(10) = %s(%d)\\n\", deka, vj8_deka_u_bin_okt_heksa( deka, baza ), baza );\n}","tekst":""},{"deklaracija":"void FESB::vj9_1()","kod":"{\n\tVrijeme v1 = { 2, 35, 45 };\n\tVrijeme v2{ 3, 50, 30 };\n\tVrijeme v3 = v9_zbrajanjeVremena( &v1, &v2 );\n\tv9_ispisVremena( &v3 );\n}","tekst":""},{"deklaracija":"void FESB::vj9_2()","kod":"{\n\tstruct Datum d1 { 2000, 6, 5 };\n\tstruct Datum d2 { 2003, 3, 31 };\n\tstruct Datum d3 { 2000, 4, 30 };\n\tstruct Datum d4 { 2004, 2, 1 };\n\tv9_ispisDatuma( &d1 );\n\tv9_ispisDatuma( &d2 );\n\tv9_ispisDatuma( &d3 );\n\tv9_ispisDatuma( &d4 );\n}","tekst":""},{"deklaracija":"void FESB::vj9_3()","kod":"{\n\tconst int BROJ_OSOBA = 5;\n\tstruct Osoba osobe[BROJ_OSOBA];\n\tosobe[0] = { \"Marko\", \"Marulic\", { 15, 5, 0 }, { 2003, 5, 12  } };\n\tosobe[1] = { \"Ana\", \"Marelica\", {20, 51, 50 }, { 2001, 5, 17 } };\n\tosobe[2] = { \"Pero\", \"Grgulj\", { 10, 0, 7 }, { 2000, 8, 1 } };\n\tosobe[3] = { \"Marta\", \"Marulic\", { 15, 5, 0 }, { 2003, 5, 12 } };\n\tosobe[4] = { \"Marko\", \"Marulic\", { 15, 5, 0 }, { 2003, 5, 12 } };\n\n\tstruct Osoba prva = osobe[0];\n\tv9_prvaOsobaPoAbecedi_ime_pa_prezime( osobe, BROJ_OSOBA );\n\tputs( \"\" );\n\tv9_najstarijaOsoba( osobe, BROJ_OSOBA );\t// popravi\n}","tekst":""},{"deklaracija":"void FESB::vj10_1()","kod":"{\n\tconst int LIMIT_ELEMENATA = 10;\n\tint niz[LIMIT_ELEMENATA];\n\tprintf( \"Unesi 10 cijelih brojeva\\n\" );\n\tfor( int i = 0; i < LIMIT_ELEMENATA; i++ )\n\t{\n\t\tprintf( \"Unesi %d. el: \", i );\n\t\tscanf_s( \"%d\", niz + i );\n\t}\n\tputs( \"\" );\n\tfor( int i = 0; i < LIMIT_ELEMENATA; i++ )\n\t{\n\t\tprintf( \"niz[%d] = %d\tna lokaciji %p\\n\", i, *( niz + i ), niz + i );\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj10_2()","kod":"{\n\tint suma, produkt, razlika;\n\tvracanjeVrijednosti_3_varijableUfunkciji( &suma, &produkt, &razlika, 25, 5 );\n\tprintf( \"broj1: %d\\nbroj2: %d\\nsuma: %d\\nrazlika: %d\\nprodukt: %d\", 25, 5, suma, razlika, produkt );\n}","tekst":""},{"deklaracija":"void FESB::vj10_3()","kod":"{\n\tstruct Datum d1 { 2000, 6, 5 };\n\tstruct Datum d2 { 2003, 3, 31 };\n\tstruct Datum d3 { 2005, 4, 30 };\n\tstruct Datum d4 { 2004, 2, 1 };\n\n\tprintf( \"dan prije unesenog dana je: %d\\n\", v9_proracunDatuma( &d1, -1 ) );\n\tprintf( \"dan poslije unesenog dana je: %d\\n\\n\", v9_proracunDatuma( &d1, 1 ) );\n\tprintf( \"dan prije unesenog dana je: %d\\n\", v9_proracunDatuma( &d2, -1 ) );\n\tprintf( \"dan poslije unesenog dana je: %d\\n\\n\", v9_proracunDatuma( &d2, 1 ) );\n\tprintf( \"dan prije unesenog dana je: %d\\n\", v9_proracunDatuma( &d3, -1 ) );\n\tprintf( \"dan poslije unesenog dana je: %d\\n\\n\", v9_proracunDatuma( &d3, 1 ) );\n\tprintf( \"dan prije unesenog dana je: %d\\n\", v9_proracunDatuma( &d4, -1 ) );\n\tprintf( \"dan poslije unesenog dana je: %d\\n\\n\", v9_proracunDatuma( &d4, 1 ) );\n}","tekst":""},{"deklaracija":"void FESB::vj10_4()","kod":"{\n\tconst int BUFFER_LIMIT = 128;\n\tchar tekst[BUFFER_LIMIT] = { \"Kratka prica je oblik kratke narativne proze. Kratke price su sazetije u usporedbi s duzim djelima fikcije, kao sto su novele\\0\" };\n\tchar podstring[BUFFER_LIMIT - 1];\t// inicijalizacija u funkciji vj10_brPonavljanja_podStringa_u_stringu\n\tprintf( \"broj ponavljanja podstringa: %d\", vj10_brPonavljanja_podstringa_u_stringu( tekst, BUFFER_LIMIT, podstring ) );\n}","tekst":""},{"deklaracija":"void FESB::vj11_1()","kod":"{\n\tFILE* fp;\n\tFILE* fp_copy{};\n\tchar naziv1[20], naziv2[20];\n\tprintf( \"Upisi puni naziv datoteke .txt: \" );\n\tscanf_s( \"%s\", naziv1 );\n\tprintf( \"Upisi puni naziv za kopiju datoteke .txt: \" );\n\tscanf_s( \"%s\", naziv2 );\n\n\tfopen_s( &fp, naziv1, \"w\" );\n\tif( fp == NULL )\n\t\tprintf( \"Greska pri otvaranju datoteke\" );\n\telse\n\t{\n\t\tfprintf( fp, \"Hello World!\\n\" );\n\t\tfprintf( fp, \"Hello World drugi put!\" );\n\t\tfclose( fp );\n\t}\n\tvj11_kopiranjeDatoteke( fp, fp_copy, naziv1, naziv2 );\n}","tekst":""},{"deklaracija":"void FESB::vj11_2()","kod":"{\n\tFILE* fp;\n\tfopen_s( &fp, \"vj11_zad2.txt\", \"r\" );\n\n\tif( fp == NULL )\n\t\tprintf( \"GRESKA\\n\" );\n\telse\n\t{\n\t\tchar broj;\n\t\tint rezultat = 0;\n\t\twhile( ( broj = fgetc( fp ) ) != EOF && ( broj >= '0' && broj <= '9' ) )\n\t\t{\n\t\t\trezultat *= 10;\n\t\t\trezultat += broj - '0';\n\t\t}\n\t\tfclose( fp );\n\n\t\tprintf( \"%d\", rezultat );\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj11_3()","kod":"{\n\tFILE* fp;\n\tfopen_s( &fp, \"vj11_zad3.txt\", \"r\" );\t// provjeri postoji li\n\tif( fp )\n\t{\n\t\tvj11_citanjeDatoteke( fp );\t// samo procitaj iz nje\n\t\tfclose( fp );\n\t}\n\telse\n\t{\n\t\tfopen_s( &fp, \"vj11_zad3.txt\", \"w\" );\t// stvori je\n\t\tif( fp )\n\t\t{\n\t\t\tfprintf( fp, \"Ana\\nA\\n2000\\n\" );\t// i popuni vrijednostima\n\t\t\tfprintf( fp, \"Ana\\nB\\n2000\\n\" );\n\t\t\tfprintf( fp, \"Mirko\\nA\\n2000\\n\" );\n\t\t\tfprintf( fp, \"Ana\\nC\\n2000\\n\" );\n\t\t\tfprintf( fp, \"Boro\\nA\\n2000\\n\" );\n\t\t\tfprintf( fp, \"Grga\\nA\\n2000\\n\" );\n\t\t\tfprintf( fp, \"Ana\\nD\\n2000\\n\" );\n\t\t\tfprintf( fp, \"Pero\\nA\\n2000\\n\" );\n\t\t\tfprintf( fp, \"Ana\\nE\\n2000\\n\" );\n\t\t\tfclose( fp );\n\n\t\t\tfopen_s( &fp, \"vj11_zad3.txt\", \"r\" );\n\t\t\tif( fp )\n\t\t\t{\n\t\t\t\tvj11_citanjeDatoteke( fp );\t\t\t\t\t// te procitaj je\n\t\t\t\tfclose( fp );\n\t\t\t}\n\t\t\telse\tprintf( \"GRESKA PRILIKOM OTVARANJA \\\"vj11_zad3.txt\\\" datoteke\\n\" );\n\t\t}\n\t\telse\tprintf( \"GRESKA PRILIKOM OTVARANJA \\\"vj11_zad3.txt\\\" datoteke\\n\" );\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj11_4()","kod":"{\n\tFILE* fp;\n\tfopen_s( &fp, \"vj11_zad4.txt\", \"r\" );\n\tif( fp )\n\t{\n\t\tvj11_citanjeDatoteke2( fp );\n\t\tfclose( fp );\n\t\tfp = NULL;\n\t}\n\telse printf( \"GRESKA\\nNapravi datoteku imena \\\"vj11_zad4.txt\\\" i zapisi nesto u nju u programu za obradu teksta\" );\n\n}","tekst":""},{"deklaracija":"void FESB::vj12_1()","kod":"{\n\tint brStudenata = 0;\n\tint sumaBodova = 0;\n\tint zelimJosStudenata = -1;\n\tdo\n\t{\n\t\tzelimJosStudenata = -1;\n\t\twhile( zelimJosStudenata == -1 )\n\t\t{\n\t\t\tprintf( \"Imas li jos studenata na popisu?( stisni Esc - ne ili Tab - da )\\n\" );\n\t\t\tchar znak = _getch();\n\t\t\tif( znak == 27 ) { zelimJosStudenata = false; }\n\t\t\telse if( znak == '\\t' ) { zelimJosStudenata = true; }\n\t\t}\n\t\tif( !zelimJosStudenata )\tbreak;\n\t\tputs( \"\" );\n\t\tdo\n\t\t{\n\t\t\tint bodovi = -2;\n\t\t\twhile( bodovi < -1 || bodovi > 100 )\n\t\t\t{\n\t\t\t\tprintf( \"Ako zelis prekinut unos bodova, unesi -1\\n\" );\n\t\t\t\tprintf( \"Unesi bodove [0-100]: \" );\n\t\t\t\tscanf_s( \"%d\", &bodovi );\n\t\t\t\tputs( \"\" );\n\t\t\t}\n\t\t\tif( bodovi == -1 )\tbreak;\n\t\t\tsumaBodova += bodovi;\n\t\t\t++brStudenata;\n\t\t} while( 1 );\n\t\tputs( \"----\" );\n\t} while( 1 );\n\n\tif( brStudenata > 0 ) printf( \"\\nProsjecni broj bodova svih studenata: %f\\n\", float( sumaBodova / float( brStudenata ) ) );\n\telse printf( \"\\nNisi unio bodove za niti jednog studenta!\" );\n}","tekst":""},{"deklaracija":"void FESB::vj12_2()","kod":"{\n\tint broj;\n\tprintf( \"Unesi broj: \" );\n\tscanf_s( \"%d\", &broj );\n\tint tempBr = broj;\n\tint velicina = tempBr > 0 ? 1 : 2;\n\twhile( tempBr > 0 )\n\t{\n\t\tvelicina++;\n\t\ttempBr /= 10;\n\t}\n\tchar* str = (char*) malloc( velicina * sizeof( char ) );\n\tif( str )\n\t{\n\t\tfor( int i = 1; i < velicina; ++i )\n\t\t{\n\t\t\t*( str + velicina - i - 1 ) = broj % 10 + '0';\n\t\t\tbroj /= 10;\n\t\t}\n\t\t*( str + velicina - 1 ) = '\\0';\n\t\tprintf( \"string: %s\\n\", str );\n\t\tfree( str );\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj12_3()","kod":"{\n\tFILE* fp;\n\tfopen_s( &fp, \"vj12_zad3_imena.txt\", \"w\" );\n\tif( fp == NULL )\n\t\tprintf( \"Greska pri otvaranju datoteke\" );\n\telse\n\t{\n\t\tfprintf( fp, \"Iva\\n\" );\n\t\tfprintf( fp, \"Marko\\n\" );\n\t\tfprintf( fp, \"Luka\\n\" );\n\t\tfprintf( fp, \"Grga\\n\" );\n\t\tfclose( fp );\n\t}\n\tchar imeStudenta[15];\n\tint bodovi;\n\tfopen_s( &fp, \"vj12_zad3_imena.txt\", \"r\" );\n\tif( fp )\n\t{\n\t\twhile( fgets( imeStudenta, 15, fp ) != NULL )\n\t\t{\n\t\t\tprintf( \"%s\", imeStudenta );\n\t\t\tint ukupno = 0;\n\t\t\tfor( int i = 0; i < 3; i++ )\n\t\t\t{\n\t\t\t\tbool isValidScore = false;\n\t\t\t\twhile( !isValidScore )\n\t\t\t\t{\n\t\t\t\t\tprintf( \"unesi bodove %d. kolokvija: \", i + 1 );\n\t\t\t\t\tscanf_s( \"%d\", &bodovi );\n\t\t\t\t\tif( bodovi >= 0 && bodovi <= 100 )\n\t\t\t\t\t{\n\t\t\t\t\t\tukupno += bodovi;\n\t\t\t\t\t\tisValidScore = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tukupno /= 3;\n\t\t\tif( ukupno > 87 && ukupno <= 100 )\n\t\t\t{\n\t\t\t\tprintf( \"\\nOcjena: 5, sa %d ukupnih bodova\\n\\n\", ukupno );\n\t\t\t}\n\t\t\telse if( ukupno > 74 )\n\t\t\t{\n\t\t\t\tprintf( \"\\nOcjena: 4, sa %d ukupnih bodova\\n\\n\", ukupno );\n\t\t\t}\n\t\t\telse if( ukupno > 59 )\n\t\t\t{\n\t\t\t\tprintf( \"\\nOcjena: 3, sa %d ukupnih bodova\\n\\n\", ukupno );\n\t\t\t}\n\t\t\telse if( ukupno > 48 )\n\t\t\t{\n\t\t\t\tprintf( \"\\nOcjena: 2, sa %d ukupnih bodova\\n\\n\", ukupno );\n\t\t\t}\n\t\t\telse if( ukupno >= 0 )\n\t\t\t{\n\t\t\t\tprintf( \"\\nOcjena: 1, sa %d ukupnih bodova\\n\\n\", ukupno );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprintf( \"\\nGRESKA!\\n\\n\" );\n\t\t\t}\n\t\t}\n\t\tfclose( fp );\n\t}\n\telse printf( \"\\nNemogu otvorit datoteku za citanje!\" );\n}","tekst":""},{"deklaracija":"void FESB::vj12_4()","kod":"{\n\tint n;\n\tprintf( \"Unesi velicinu nizova: \" );\n\tscanf_s( \"%d\", &n );\n\tint* niz1 = (int*) malloc( n * sizeof( int ) );\n\tint* niz2 = (int*) malloc( n * sizeof( int ) );\n\tif( niz1 == NULL )\treturn;\n\tif( niz2 == NULL ) { free( niz1 ); return; }\n\n\tfor( int i = 0; i < n; i++ )\t// napuni nizove vrijednostima\n\t{\n\t\t*( niz1 + i ) = i;\n\t\t*( niz2 + i ) = ( i + 1 ) * 10;\n\t}\n\n\tint* rep1 = niz1 + n - 1;\n\tint* rep2 = niz2 + n - 1;\n\n\twhile( _getch() != 27 )\t// update na pritisak tipke, zavrsi kada se stisne Esc\n\t{\n\t\tSleep( 50 );\n\t\tfor( int i = 0; i < n; i++ )\t// ispisi stanje nizova\n\t\t{\n\t\t\tprintf( \"%d \", *( niz1 + i ) );\n\t\t}\n\t\tfor( int i = 0; i < n; i++ )\n\t\t{\n\t\t\tprintf( \"%d \", *( niz2 + i ) );\n\t\t}\n\t\tprintf( \"\\n\" );\n\n\t\tint glava1 = *niz1;\n\t\tint glava2 = *niz2;\n\t\tfor( int i = 0; i < n - 1; ++i )\t// pomakni sve el u niz1 ulijevo\n\t\t{\n\t\t\t*( niz1 + i ) = *( niz1 + i + 1 );\n\t\t}\n\t\t*rep1 = glava2; // premjesti el sa niz od glave2 na niz repa1\n\n\t\tfor( int i = 0; i < n - 1; ++i )\n\t\t{\n\t\t\t*( niz2 + i ) = *( niz2 + i + 1 );\t// pomakni sve el u nizu za ulijevo\n\t\t}\n\t\t*rep2 = glava1; // premjesti el sa niz od glave1 na niz repa2\n\t}\n\tfree( niz1 );\n\tfree( niz2 );\n}","tekst":""}]}},{"FESB":{"Zadaci":[{"deklaracija":"void FESB::vj1_1()","kod":"{\n\tchar a = 'a';\n\tint b = 5;\n\tfloat c = 6.4;\n\tdouble d = 7.444444444;\n\n\tint mem = sizeof( a ) + sizeof( b ) + sizeof( c ) + sizeof( d );\n\tprintf( \"%c %p\\n\", a, &a );\n\tprintf( \"%d %p\\n\", b, &b );\n\tprintf( \"%f %p\\n\", c, &c );\n\tprintf( \"%e %p\\n\", d, &d );\n\tprintf( \"Varijable su zauzele %d bajtova\\n\", mem );\n}","tekst":""},{"deklaracija":"void FESB::vj1_2()","kod":"{\n\tchar a = '0', b = '9', c = a + b;\n\tprintf( \"a: %c b: %c c: %c\\n\", a, b, c );\n\tprintf( \"a: %d b: %d c: %d\\n\", a, b, c );\n}","tekst":""},{"deklaracija":"void FESB::vj1_3()","kod":"{\n\tint a = 15, b = 5;\n\tprintf( \"suma: %d\\n\", a + b );\n\tprintf( \"razlika: %d\\n\", a - b );\n\tprintf( \"produkt: %d\\n\", a * b );\n\tprintf( \"kvocijent: %d\\n\", a / b );\n}","tekst":""},{"deklaracija":"void FESB::vj1_4()","kod":"{\n\tint suma = 0;\n\tfor( int i = 0; i < 50; ++i )\n\t\tsuma += i;\n\tprintf( \"suma: %d\\n\", suma );\n}","tekst":""},{"deklaracija":"void FESB::vj1_5()","kod":"{\n\tconst int SIRINA = 5;\n\tconst int VISINA = 5;\n\tchar slovo = 'E';\n\tfor( int redak = 0; redak < VISINA; ++redak )\n\t{\n\t\tfor( int brojPonavljanja = SIRINA - redak; brojPonavljanja > 0; --brojPonavljanja )\n\t\t{\n\t\t\tprintf( \"%c \", slovo - redak );\t// Umanjuj ASCII vrijednost tako da dobijes zeljeno slovo\n\t\t}\n\t\tprintf( \"\\n\" );\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj2_1()","kod":"{\n\tint cijeliBr;\n\tfloat realniBr;\n\tprintf( \"unesi realni broj: \" );\n\tscanf_s( \"%f\", &realniBr );\n\tcijeliBr = ( (int) ( realniBr * 10 ) % 10 >= 5 ) ? realniBr + 1 : realniBr;\t// OPTIMIZACIJA: koristi znanje o prikazu float brojeva u memoriji i uz pomoc pravih bitova utvrdi treba li povecat broj\n\tprintf( \"cijeli broj: %d\\n\", cijeliBr );\n}","tekst":""},{"deklaracija":"void FESB::vj2_2()","kod":"{\n\tconst int INPUT_LIMIT = 10;\n\tint broj, brojac = 0;\n\twhile( brojac < INPUT_LIMIT )\n\t{\n\t\tprintf( \"unesi broj: \" );\n\t\tscanf_s( \"%d\", &broj );\n\t\tif( broj % 2 == 1 )\t// OPTIMIZACIJA: koristi znanje o reprezentaciji inta u memoriji i provjeri tocan bit\n\t\t{\n\t\t\tprintf( \"%d\\n\", broj );\n\t\t}\n\t\t++brojac;\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj2_3()","kod":"{\n\tconst int INPUT_LIMIT = 10;\n\tint broj, brojac = 0, brojacNeparan = 0;\n\twhile( brojac < INPUT_LIMIT )\n\t{\n\t\tprintf( \"unesi broj: \" );\n\t\tscanf_s( \"%d\", &broj );\n\t\tif( broj % 3 == 0 )\n\t\t{\n\t\t\t++brojacNeparan;\n\t\t}\n\t\t++brojac;\n\t}\n\tprintf( \"%d broja je djeljivo sa 3\\n\", brojacNeparan );\n}","tekst":""},{"deklaracija":"void FESB::vj2_4()","kod":"{\n\tconst int INPUT_LIMIT = 10;\n\tchar slovo;\n\tint  brojac = 0, brojac_MalihSlova = 0, brojac_H = 0;\n\twhile( brojac < INPUT_LIMIT )\n\t{\n\t\tprintf( \"unesi slovo: \" );\n\t\tscanf_s( \" %c\", &slovo, 2 );\n\t\tprintf( \"\\n\" );\n\t\tif( slovo >= 'a' && slovo <= 'z' )\n\t\t{\n\t\t\tbrojac_MalihSlova++;\n\t\t}\n\t\telse if( slovo == 'H' )\n\t\t{\n\t\t\t++brojac_H;\n\t\t}\n\t\t++brojac;\n\t}\n\tprintf( \"\\nMalih slova ima: %d\\nNjih %d je bilo = H\", brojac_MalihSlova, brojac_H );\n}","tekst":""},{"deklaracija":"void FESB::vj2_5()","kod":"{\n\tconst int BROJ_UCENIKA = 5;\n\tint bodovi, sumaBodova = 0, prolaz = 0;\n\tfor( int i = 0; i < BROJ_UCENIKA; ++i )\n\t{\n\t\tprintf( \"Unesi bodove %d. ucenika\\n\", i + 1 );\n\t\tscanf_s( \"%d\", &bodovi );\n\t\tif( bodovi > 50 )\t// TODO: OPTIMIZACIJA: branchless increment\n\t\t\tprolaz++;\n\t\tsumaBodova += bodovi;\n\t}\n\tprintf( \"Kolokvij je proslo %d ucenika\\nProsjecni broj bodova je %d\\n\", prolaz, sumaBodova / BROJ_UCENIKA );\n}","tekst":""},{"deklaracija":"void FESB::vj3_1()","kod":"{\n\tint broj, suma = 0, brojac = 0;\n\tprintf( \"Unesi brojeve razlicite od 0 za daljnji unos\\n\" );\n\tdo\n\t{\n\t\tscanf_s( \"%d\", &broj );\n\t\tif( broj != 0 )\n\t\t{\n\t\t\tsuma += broj;\n\t\t\t++brojac;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t} while( true );\n\tprintf( \"Arihmeticka sredina: %f\", (float) suma / brojac );\n}","tekst":""},{"deklaracija":"void FESB::vj3_2()","kod":"{\n\tint broj, reverseBroj = 0;\n\tprintf( \"Unesi broj: \" );\n\tscanf_s( \"%d\", &broj );\n\twhile( broj > 0 )\n\t{\n\t\treverseBroj *= 10;\n\t\treverseBroj += broj % 10;\n\t\tbroj /= 10;\n\t}\n\tprintf( \"Obrnuti redoslijed znamenaka: %d\\n\", reverseBroj );\n}","tekst":""},{"deklaracija":"void FESB::vj3_3()","kod":"{\n\tint generiraniBroj, korisnikBroj, pokusaj = 0;\n\tsrand( (unsigned) time( NULL ) );\n\tgeneriraniBroj = rand() % 1000;\n\tdo\n\t{\n\t\tprintf( \"Unesi broj o kojem mislis da odgovara izabranom broju: \" );\n\t\tscanf_s( \"%d\", &korisnikBroj );\n\t\tprintf( \"\\n\" );\n\n\t\t++pokusaj;\n\t\tif( korisnikBroj > generiraniBroj ) { printf( \"Generirani broj je manji od unesenog!\\n\" ); }\n\t\telse if( korisnikBroj < generiraniBroj ) { printf( \"Generirani broj je veci od unesenog!\\n\" ); }\n\t\telse\n\t\t{\n\t\t\tprintf( \"Pogodak iz %d. pokusaja!\\n\", pokusaj );\n\t\t\tbreak;\n\t\t}\n\t} while( 1 );\n}","tekst":""},{"deklaracija":"void FESB::vj3_4()","kod":"{\n\tfor( int i = 1; i <= 100; ++i )\n\t{\n\t\tbool primitivan = false;\n\t\tfor( int j = 2; j < i / 2 + 1; ++j )\t// svi brojevi koji su veci od i / 2 + 1 nemogu biti primitivni\n\t\t{\n\t\t\tif( i % j == 0 )\n\t\t\t{\n\t\t\t\tprimitivan = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif( primitivan )\tprintf( \"Broj %d je primitivan\\n\", i );\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj4_1()","kod":"{\n\tint broj, broj2;\n\tchar operacija = 0;\n\twhile( !operacija )\n\t{\n\t\tprintf( \"Unesi broj: \" );\n\t\tscanf_s( \"%d\", &broj );\n\t\tprintf( \"Unesi operaciju: \" );\n\t\tscanf_s( \" %c\", &operacija, 2 );\n\t\tprintf( \"Unesi broj: \" );\n\t\tscanf_s( \"%d\", &broj2 );\n\t\tswitch( operacija )\n\t\t{\n\t\tcase '+':\n\t\t\tprintf( \"Rezultat operacije %d %c %d = %d\", broj, operacija, broj2, broj + broj2 );\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tprintf( \"Rezultat operacije %d %c %d = %d\", broj, operacija, broj2, broj - broj2 );\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tprintf( \"Rezultat operacije %d %c %d = %d\", broj, operacija, broj2, broj * broj2 );\n\t\t\tbreak;\n\t\tcase '/':\n\t\t\tprintf( \"Rezultat operacije %d %c %d = %d\", broj, operacija, broj2, broj / broj2 );\n\t\t\tbreak;\n\t\tcase '^':\n\t\t{\n\t\t\tint rezultat = pow( broj, broj2 );\n\t\t\tprintf( \"Rezultat operacije %d %c %d = %d\", broj, operacija, broj2, rezultat );\n\t\t}\n\t\tbreak;\n\t\tcase '%':\n\t\t\tprintf( \"Rezultat operacije %d %c %d = %d\", broj, operacija, broj2, broj % broj2 );\n\t\t\tbreak;\n\t\tcase '<':\n\t\t\tprintf( \"Jednakost %d %c %d je %s\", broj, operacija, broj2, ( broj < broj2 ) ? \"tocna\" : \"netocna\" );\n\t\t\tbreak;\n\t\tcase '>':\n\t\t\tprintf( \"Jednakost %d %c %d je %s\", broj, operacija, broj2, ( broj > broj2 ) ? \"tocna\" : \"netocna\" );\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tprintf( \"Kriv unos, pokusaj ponovno\\n\" );\n\t\t\toperacija = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj4_2()","kod":"{\n\tconst int INPUT_LIMIT = 20;\n\tint ocjeneKolokvija[20];\n\tint histogram[6] = {};\n\tint ocjena = 0;\n\tprintf( \"Unesi 20 ocjena\\n\" );\n\tfor( int i = 0; i < INPUT_LIMIT; ++i )\n\t{\n\t\twhile( ocjena < 1 || ocjena > 5 )\n\t\t{\n\t\t\tprintf( \"Unesi ocjenu (1-5): \" );\n\t\t\tscanf_s( \"%d\", &ocjena );\n\t\t}\n\t\tocjeneKolokvija[i] = ocjena;\n\t\t++histogram[ocjena];\n\t\tocjena = 0;\n\t}\n\tprintf( \"5 - %d\\n4 - %d\\n3 - %d\\n2 - %d\\n1 - %d\", histogram[5], histogram[4], histogram[3], histogram[2], histogram[1] );\n}","tekst":""},{"deklaracija":"void FESB::vj4_3()","kod":"{\n\tconst int BROJ_ELEMENATA = 10;\n\tint niz[BROJ_ELEMENATA];\n\tint broj;\n\tfor( int el = 0; el < BROJ_ELEMENATA; ++el )\n\t{\n\t\tprintf( \"Unesi broj: \" );\n\t\tscanf_s( \"%d\", &broj );\n\t\tniz[el] = broj;\n\t}\n\n\tint min = niz[0], max = niz[0];\n\tfor( int i = 1; i < 10; ++i )\n\t{\n\t\tif( min > niz[i] )\t\t\tmin = niz[i];\n\t\telse if( max < niz[i] )\tmax = niz[i];\n\t}\n\n\tfor( int i = 0; i < BROJ_ELEMENATA; ++i )\n\t{\n\t\tfor( int j = i; j < BROJ_ELEMENATA; ++j )\n\t\t{\n\t\t\tif( niz[i] > niz[j] )\n\t\t\t{\n\t\t\t\tint temp = niz[i];\n\t\t\t\tniz[i] = niz[j];\n\t\t\t\tniz[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\n\tprintf( \"min: %d\\nmax: %d\\n\", min, max );\n\tfor( int el = 0; el < BROJ_ELEMENATA; ++el )\n\t{\n\t\tprintf( \"%d \", niz[el] );\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj5_1()","kod":"{\n\tchar znak = 0;\n\twhile( znak != 27 )\n\t\tznak = _getche();\n}","tekst":""},{"deklaracija":"void FESB::vj5_2()","kod":"{\n\tconst int STRING_LIMIT = 20;\n\tchar str1[STRING_LIMIT] = { 0 };\n\tchar str2[STRING_LIMIT] = { 0 };\n\tprintf( \"Unesi tekst u varijablu: \" );\n\tscanf( \" %s\", &str1 );\n\tfor( int idx = 0; str1[idx] != '\\0' && idx < STRING_LIMIT; ++idx )\n\t{\n\t\tif( !( isdigit( str1[idx] ) ) ) { str2[idx] += str1[idx]; }\n\t\telse { str2[idx] += ' '; }\n\t}\n\tstr2[STRING_LIMIT - 1] = '\\0';\t// forsiraj zadnji karakter drugog stringa da bude 0 terminator (sprijecava citanje memorije koje mu ne pripada ako korisnik unese vise znakova od STRING_LIMITA)\n\tprintf( \"str1: %s\\nstr2: %s\", str1, str2 );\n}","tekst":""},{"deklaracija":"void FESB::vj5_3()","kod":"{\n\tconst int STRING_LIMIT = 20;\n\tchar str[STRING_LIMIT] = { 0 };\n\tprintf( \"Unesi tekst: \" );\n\tscanf_s( \" %s\", &str );\n\tstr[STRING_LIMIT - 1] = '\\0';\t// forsiraj kraj stringa\n\tfor( int idx = 0; str[idx] != '\\0'; ++idx )\n\t{\n\t\tif( isdigit( str[idx] ) )\tstr[idx] = ' ';\n\t}\n\tprintf( \"str: %s\\n\", str );\n\t//\n\tfor( int idx = 0; str[idx] != '\\0'; ++idx )\n\t{\n\t\tif( str[idx] == 'a' || str[idx] == 'e' || str[idx] == 'i' || str[idx] == 'o' || str[idx] == 'u' ||\n\t\t\tstr[idx] == 'A' || str[idx] == 'E' || str[idx] == 'I' || str[idx] == 'O' || str[idx] == 'U' )\n\t\t\tstr[idx] = ' ';\n\t}\n\tprintf( \"str: %s\\n\", str );\n\t//\n\tfor( int idx = 0; str[idx] != '\\0'; ++idx )\n\t{\n\t\tif( islower( str[idx] ) )\t\tstr[idx] = str[idx] - 'a' + 'A';\n\t\telse if( isupper( str[idx] ) )\tstr[idx] = str[idx] - 'A' + 'a';\n\t}\n\tprintf( \"str: %s\\n\", str );\n}","tekst":""},{"deklaracija":"void FESB::vj5_4()","kod":"{\n\tunsigned int deka;\n\tchar heksa[9] = { '0', '0', '0', '0', '0', '0', '0', '0', '\\0' };\n\tunsigned int pozicija = 0;\n\tprintf( \"Unesi dekadski broj: \" );\n\tscanf_s( \"%d\", &deka );\n\twhile( deka > 0 )\n\t{\n\t\tint temp = deka % 16;\n\t\tswitch( temp )\n\t\t{\n\t\tcase 10: case 11: case 12: case 13: case 14: case 15:\n\t\t\theksa[pozicija] = temp - 10 + 'A';\t// koristi 10 kao offset 0, 11 kao offset 1, ...\n\t\t\tbreak;\n\t\tdefault:\n\t\t\theksa[pozicija] = temp + '0';\n\t\t\tbreak;\n\t\t}\n\t\t++pozicija;\n\t\tdeka /= 16;\n\t}\n\tfor( int i = 7; i >= 0; --i )\n\t\tprintf( \"%c\\n\", heksa[i] );\n}","tekst":""},{"deklaracija":"void FESB::vj6_1()","kod":"{\n\tint A[3][3], B[3][3];\n\tint broj;\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t{\n\t\t\tprintf( \"A[%d][%d]: \", i, j );\n\t\t\tscanf( \"%d\", &broj );\n\t\t\tA[i][j] = broj;\n\t\t\tB[i][j] = 5 * A[i][j];\n\t\t}\n\t}\n\t//\n\tprintf( \"matrica B\\n\" );\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t{\n\t\t\tprintf( \"%d \", B[i][j] );\n\t\t}\n\t\tprintf( \"\\n\" );\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj6_2()","kod":"{\n\tint A[3][3], B[3][3];\n\tint broj;\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t{\n\t\t\tprintf( \"A[%d][%d]: \", i, j );\n\t\t\tscanf( \"%d\", &broj );\n\t\t\tA[i][j] = broj;\n\t\t}\n\t}\n\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t{\n\t\t\tB[i][j] = A[j][i];\n\t\t}\n\t}\n\n\tprintf( \"matrica B\\n\" );\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t{\n\t\t\tprintf( \"%d \", B[i][j] );\n\t\t}\n\t\tprintf( \"\\n\" );\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj6_3()","kod":"{\n\tint A[3][3], B[3][3], C[3][3], D[3][3] = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} };\n\tint broj;\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t{\n\t\t\tprintf( \"A[%d][%d]: \", i, j );\n\t\t\tscanf( \"%d\", &broj );\n\t\t\tA[i][j] = broj;\n\t\t\tprintf( \"B[%d][%d]: \", i, j );\n\t\t\tscanf( \"%d\", &broj );\n\t\t\tB[i][j] = broj;\n\t\t}\n\t}\n\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t{\n\t\t\tC[i][j] = A[i][j] + B[i][j];\n\t\t}\n\t}\n\n\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t{\n\t\t\tfor( int k = 0; k < 3; ++k )\n\t\t\t{\n\t\t\t\tD[i][j] += A[i][k] * B[k][j];\n\t\t\t}\n\t\t}\n\t}\n\n\tprintf( \"matrica C\\n\" );\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t{\n\t\t\tprintf( \"%d \", C[i][j] );\n\t\t}\n\t\tprintf( \"\\n\" );\n\t}\n\tprintf( \"matrica D\\n\" );\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t{\n\t\t\tprintf( \"%d \", D[i][j] );\n\t\t}\n\t\tprintf( \"\\n\" );\n\t}\n}","tekst":""},{"deklaracija":"void FESB::vj6_4()","kod":"{\n\tconst unsigned int BROJ_LJUDI = 5;\n\tconst unsigned int NAME_LIMIT = 20;\n\tchar imena[BROJ_LJUDI][NAME_LIMIT];\n\tfor( int idx = 0; idx < BROJ_LJUDI; ++idx )\n\t{\n\t\tprintf( \"Unesi %d. ime: \", idx + 1 );\n\t\tgets_s( imena[idx] );\n\t\t//imena[idx][NAME_LIMIT - 1] = '\\0';\t// forsiraj kraj stringa\n\t}\n\t//\n\tint idx1 = 0, idx2 = 0;\n\tfor( int tempIdx = 0; tempIdx < BROJ_LJUDI - 1; ++tempIdx )\n\t{\n\t\tidx1 = ( _strcmpi( imena[tempIdx + 1], imena[idx1] ) < 0 ) ? tempIdx + 1 : idx1;\n\t\tif( _strcmpi( imena[tempIdx + 1], imena[idx2] ) > 0 )\n\t\t{\n\t\t\tidx2 = tempIdx + 1;\n\t\t}\n\n\t}\n\tprintf( \"Prvi po abecedi je: %s, index: %d\\nZadnji po abecedi je: %s, index: %d\\n\", imena[idx1], idx1, imena[idx2], idx2 );\n\t//\n\t//sortiranje (Selection sort - vrlo efikasan jer nema puno kopiranja stringa)\n\tfor( unsigned int i = 0; i < BROJ_LJUDI; ++i )\n\t{\n\t\tunsigned int j = i + 1;\t\t// potreban izvan unutarnje petlje\n\t\tunsigned int tempIdx = i;\t// potreban izvan unutarnje petlje\n\t\tbool foundBetterResult = false;\n\t\tfor( ; j < BROJ_LJUDI; ++j )\n\t\t{\n\t\t\tfor( unsigned int k = 0; k < NAME_LIMIT && imena[tempIdx][k] != '\\0' && imena[j][k] != '\\0'; ++k )\n\t\t\t{\n\t\t\t\tchar curr = tolower( imena[j][k] );\n\t\t\t\tchar candidate = tolower( imena[tempIdx][k] );\n\t\t\t\tif( curr < candidate )\n\t\t\t\t{\n\t\t\t\t\ttempIdx = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if( curr > candidate )\tbreak;\n\t\t\t}\n\t\t}\n\t\tif( bool foundBetterResult = tempIdx != i )\n\t\t{\n\t\t\tchar temp[NAME_LIMIT];\n\t\t\tstrcpy_s( temp, NAME_LIMIT, imena[i] );\n\t\t\tstrcpy_s( imena[i], NAME_LIMIT, imena[tempIdx] );\n\t\t\tstrcpy_s( imena[tempIdx], NAME_LIMIT, temp );\n\t\t}\n\t}\n\tputs( \"\\nSortiran ispis:\" );\n\tfor( unsigned int idx = 0; idx < BROJ_LJUDI; ++idx )\n\t\tprintf_s( \"%d. %s\\n\", idx + 1, imena[idx] );\n}","tekst":""}]}}],"pathToProj":"_Projekti\\FESB"}},{"razno":{"Broj cjeline":[{"PracticalCppProg":{"Zadaci":[{"deklaracija":"void PracticalCppProg::pog10_1()","kod":"{\n\tBOLEAN b = TRUE;\n\tif( b )  \tstd::cout << \"TEST MACRO\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog10_2()","kod":"{\n\tBOLEAN isIstina = divisibleBy10( 10 );\n\tstd::cout << \"Broj: \" << 10 << ( ( isIstina == 1 ) ? \" je\" : \" nije\" ) << \" djeljiv sa 10!\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog10_3()","kod":"{\n\tstd::cout << is_digit( 5 );\n\tstd::cout << is_hex( 5 );\n\tstd::cout << is_hex( 'b' );\n\tstd::cout << is_hex( 'g' );\n\tstd::cout << is_hex( 'F' );\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog10_4()","kod":"{\n\tint a = 5, b = 14, temp = 0;\n\tstd::cout << \"swap varijabli putem MACRO:\\n\";\n\tswap( a, b, temp );\n\tstd::cout << \"sa temp varijablom: \" << a << \" \" << b << \"\\n\";\n\tswap2( a, b );\n\tstd::cout << \"bez temp varijable: \" << a << \" \" << b << \"\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog11_1()","kod":"{\n\tputs( \"PRIJE:\" );\n\tcrtaj_grid();\n\tfor( int i = 0; i < X_SIZE; ++i )\n\t{\n\t\tset_bit( i, 0, true );\n\t\tset_bit( i, Y_SIZE - 1, 1 );\n\t}\n\tstd::cout << \"\\nPoslije:\\n\";\n\tcrtaj_grid();\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog11_2()","kod":"{\n\tputs( \"PRIJE:\" );\n\tcrtaj_grid();\n\tfor( int i = 0; i < X_SIZE; ++i )\n\t{\n\t\tclear_bit( i, 0 );\n\t}\n\tstd::cout << \"\\nPoslije:\\n\";\n\tcrtaj_grid();\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog11_3()","kod":"{\n\tstd::cout << numOfBits( 5 ) << \"\\n\"\n\t\t<< numOfBits( 10 ) << \"\\n\"\n\t\t<< numOfBits( 15 ) << \"\\n\";\n\tstd::cout << numOfBits( -5 ) << \"\\n\"\n\t\t<< numOfBits( -15 ) << \"\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog11_4()","kod":"{\n\tint broj;\n\tint temp;\n\tchar postavljeniBitoviBroja[sizeof( broj ) + 1] = { 0 };\n\tstd::cin >> broj;\n\ttemp = broj;\n\tsize_t idx = 0;\n\tfor( ; temp > 0; ++idx )\n\t{\n\t\tpostavljeniBitoviBroja[sizeof( broj ) - idx] = ( temp & 0x1 ) + '0';\t// OPTIMIZACIJA: spremi rezultat u bufer umjesto zvat funkciju za ispis za svaki broj\n\t\ttemp >>= 1;\n\t}\n\tstd::cout << postavljeniBitoviBroja << \"\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog11_5()","kod":"{\n\tint broj;\n\tstd::cin >> broj;\n\tstd::array<short, 8> odvojeno;\n\tchar bitoviDijelaBroja[5] = { 0 };\n\todvojeno = podijeliIntegerU8Dijela( broj );\n\tfor( int i = 0; i < 8; ++i )\n\t{\n\t\tfor( int j = 0; j < 4; ++j )\n\t\t{\n\t\t\tbitoviDijelaBroja[3 - j] = ( odvojeno[i] & 0x01 ) + '0';\n\t\t\todvojeno[i] >>= 1;\n\t\t}\n\t\tstd::cout << bitoviDijelaBroja << \"\\n\";\n\t}\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog11_6()","kod":"{\n\tchar broj = 54;\n\tchar result = shiftBitsLeft( broj );\n\tchar bitoviBroja[sizeof( broj ) + 1] = { 0 };\n\tconst char MSG = 1 << sizeof( broj );\t// Most Significant Bit\n\tstd::cout << \"\\nBroj: \";\n\tsize_t idx = 0;\n\tdo\n\t{\n\t\tbitoviBroja[idx] = ( broj & MSG ) + '0';\n\t\tbroj <<= 1;\n\t\t++idx;\n\t} while( broj > 0 );\n\tstd::cout << bitoviBroja\n\t\t<< \"(2)\\nRezultat: \";\n\n\tidx = 0;\n\tdo\n\t{\n\t\tbitoviBroja[idx] = ( result & MSG ) + '0';\n\t\tresult <<= 1;\n\t\t++idx;\n\t} while( result > 0 );\n\tstd::cout << bitoviBroja << \"(2)\";\t// po bazi 2\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog13_1()","kod":"{\n\tParsity primjer;\n\tprimjer.put();\n\tstd::cout << primjer.test() << \"\\n\";\n\tprimjer.put();\n\tstd::cout << primjer.test() << \"\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog13_2()","kod":"{\n\tCheckbook book1;\n\tbook1.addItem( 5 );\n\tbook1.addItem( 100 );\n\tbook1.addItem( 100 );\n\tstd::cout << book1.total();\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog13_3()","kod":"{\n\tQueue q;\n\tq.addItem( 1 );\n\tq.addItem( 2 );\n\tq.addItem( 3 );\n\tstd::cout << q.get() << \"\\n\";\n\tstd::cout << q.get() << \"\\n\";\n\tq.addItem( 10 );\n\tstd::cout << q.get() << \"\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog13_4()","kod":"{\n\tSmall_set small_set;\n\tsmall_set.set( 3 );\n\tsmall_set.set( 5 );\n\tsmall_set.set( 5 );\n\tstd::cout << small_set.test( 3 ) << '\\n';      // Prints \"1\"\n\tstd::cout << small_set.test( 0 ) << '\\n';        // Prints \"0\"\n\tsmall_set.clear( 5 );                             // Set contains [3]\n\tSmall_set another_set( small_set );\n\tsmall_set.set( 0 );\n\tstd::cout << small_set.test( 3 ) << '\\n';      // Prints \"1\"\n\tstd::cout << small_set.test( 0 ) << '\\n';        // Prints \"0\"\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog13_5()","kod":"{\n  ////todo: FlachCards klasa\n\tstd::vector<FlashCards::single_card> cards = {\t// dodavanje kartica dinamicki\n\t\t{ \"test1\", \"test11\" },\n\t\t{ \"test2\", \"test2\" },\n\t\t{ \"test3\", \"test3\" },\n\t\t{ \"test4\", \"test4\" },\n\t\t{ \"test5\", \"test5\" }\n\t};\n\n\tFlashCards fc( cards.data(), cards.size() );\n\tfc.izbornik();\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog14_1()","kod":"{\n\tShareFile1 test;\n\tstd::cout << \"ShareFile1: \" << is_using_file1() << \"\\n\";\n\tShareFile2_ test2;\n\tstd::cout << \"ShareFile2: \" << is_using_file1( 0 ) << \"\\n\";\n\tstd::cout << \"----------------\\n\";\n\n\ttest.otvori_datoteku();\n\tstd::cout << \"ShareFile1: \" << is_using_file1() << \"\\n\";\n\ttest2.otvori_datoteku();\n\tstd::cout << \"ShareFile2: \" << is_using_file1( 0 ) << \"\\n\";\n\tstd::cout << \"----------------\\n\";\n\n\ttest.zatvori_datoteku();\n\ttest2.zatvori_datoteku();\n\ttest2.otvori_datoteku();\n\tstd::cout << \"ShareFile2: \" << is_using_file1( 0 ) << \"\\n\";\n\ttest.otvori_datoteku();\n\tstd::cout << \"ShareFile1: \" << is_using_file1() << \"\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog14_2()","kod":"{\n\tstd::array<Pigs, 5> pigs;\n\tstd::array<Dogs, 2> dogs;\n\tstd::array<Horses, 3> horses;\n\tstd::cout << ukupanBrojZivotinja() << \"\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog14_3()","kod":"{\n\tstd::array<Stack_Instance, 5> stacks;\n\tstd::cout << Stack_Instance::who_is_owner( &stacks[0], 5 ) << \"\\n\";\n\tstacks[0].take_control();\n\tstd::cout << Stack_Instance::who_is_owner( &stacks[0], 5 ) << \"\\n\";\n\tstacks[4].pop();\n\tstacks[0].push_back( 10 );\n\tstd::cout << \"stack[0] size: \" << stacks[0].size()\n\t\t<< \"\\nstack[1] size: \" << stacks[1].size()\n\t\t<< '\\n';\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog14_4()","kod":"{\n  //227. stranica\n\tchar ime[] = \"Dogs.hpp\";\n\tLine_number test( ime );\n\tif( test.getCurrentLine() == std::numeric_limits<size_t>::max() )\treturn; // failed to open\n\tLine_number test2( ime );\n\tif( test2.getCurrentLine() == std::numeric_limits<size_t>::max() )\treturn;\t// failed to open\n\n\tstd::cout << \"test2.getCurrentLine(): \" << test2.getCurrentLine() << '\\n';\n\tstd::cout << \"\\ntest - test2: \" << test.getFileRef().tellg() << \" - \" << test2.getFileRef().tellg() << \"\\n\";\n\ttest.goto_line( 5 );\n\tstd::cout << \"\\ntest - test2: \" << test.getFileRef().tellg() << \" - \" << test2.getFileRef().tellg() << \"\\n\";\n\ttest.goto_line( 2 );\n\tstd::cout << \"\\ntest - test2: \" << test.getFileRef().tellg() << \" - \" << test2.getFileRef().tellg() << \"\\n\";\n\ttest2.goto_line( 2 );\n\tstd::cout << \"\\ntest - test2: \" << test.getFileRef().tellg() << \" - \" << test2.getFileRef().tellg() << \"\\n\";\n\tstd::cout << \"test.getCurrentLine(): \" << test.getCurrentLine() << '\\n';\n\tstd::cout << \"test.getFileRef().tellg(): \" << test.getFileRef().tellg() << '\\n';\n\ttest2.goto_line( 6 );\n\ttest.goto_line( 6 );\n\tstd::cout << \"test.getCurrentLine(): \" << test.getCurrentLine() << '\\n';\n\tstd::cout << \"test2.getCurrentLine(): \" << test2.getCurrentLine() << '\\n';\n\ttest2.getFileRef().seekg( 5, std::ios::cur );\n\tstd::cout << \"test2.getCharPos(): \" << test2.getCharPos() << '\\n';\n\ttest2.goto_line( 0 );\n\ttest2.getFileRef().seekg( 5, std::ios::cur );\n\tstd::cout << \"test2.getCharPos(): \" << test2.getCharPos() << '\\n';\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog15_1()","kod":"{\n\tstd::array<int, 15> niz;\n\tniz.fill( 15 );\n\tfor( const auto& n : niz )\n\t\tstd::cout << n << \" \";\n\tstd::cout << \"\\n\";\n\tpostavi_niz_na_nulu( niz );\n\tfor( const auto& n : niz )\n\t\tstd::cout << n << \" \";\n\tstd::cout << \"\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog15_2()","kod":"{\n\tconst char str1[] = \" \\ttest \";\n\tconst char str2[] = \"  \\t \";\n\tconst char* c = prvi_alfa_num( str1 );\n\tconst char* d = prvi_alfa_num( str2 );\n\tif( c )\n\t\tstd::cout << c << \"\\n\";\n\telse\n\t\tstd::cout << \"nullptr\\n\";\n\tif( d )\n\t\tstd::cout << d << \"\\n\";\n\telse\n\t\tstd::cout << \"nullptr\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog16_1()","kod":"{\n\tFile_16C f1( \"linije.dat\" );\n\tstd::cout << \"broj linija: \" << f1.numOfLinesInFile() << \" u datoteci: \\\"\" << f1.getName() << \"\\\"\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog16_2()","kod":"{\n\tFile_16C f2( \"linija.dat\" );\n\tf2.copy_file( \"copy-linija.dat\" );\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog16_3()","kod":"{\n\tFile_16C f3;\n\tstd::fstream lista( \"lista.dat\", std::ios::out );\n\tlista << 3 << \" \" << 6 << \" \" << 9 << \" \" << 10 << \" \" << 11 << \" \" << 12;\n\tlista.close();\n\tlista.open( \"lista.dat\", std::ios::out | std::ios::in | std::ios::ate );\n\tlista.seekg( std::ios::beg );\n\tstd::cout << \"\\\"lista.dat\\\": \";\n\tf3.ispis( lista );\n\tstd::cout << \"\\n\";\n\tf3.listOfNumbers( lista );\n\n\tstd::fstream sa3( \"djeljivi sa 3.dat\", std::ios::in | std::ios::app );\n\tstd::cout << \"\\\"djeljivi sa 3.dat\\\": \";\n\tf3.ispis( sa3 );\n\tstd::cout << \"\\n\";\n\n\tstd::fstream ostali( \"svi ostali.dat\", std::ios::in | std::ios::app );\n\tstd::cout << \"\\\"svi ostali.dat\\\": \";\n\tf3.ispis( ostali );\n\tstd::cout << \"\\n\";\n\n\tlista.close();\n\tsa3.close();\n\tostali.close();\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog16_4()","kod":"{\n\tFile_16C f4( \"File_16C remove high bit.txt\" );\n\ttypedef const unsigned char cuc;\n\tcuc podaci[] = { static_cast<cuc>( 192 ), static_cast<cuc>( 168 ), static_cast<cuc>( 128 ), static_cast<cuc>( 125 ), '\\0' };\n\tstd::fstream in( f4.getName(), std::ios::out | std::ios::app | std::ios::trunc );\n\tin << podaci;\n\tin.close();\n\tf4.removeHighBit();\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog16_5()","kod":"{\n\tFile_16C f5( \"pretvorba ASCI u bin.dat\" );\n\tstd::cout << \"PRIJE: \";\n\tf5.ispis();\n\n\tif( f5.ASCI_to_bin() )\n\t{\n\t\tstd::cout << \"\\nPretvorba uspjesna!\\n\";\n\t\tf5.bin_to_ASCI();\n\t\tstd::cout << \"\\nPOSLIJE: \";\n\t\tf5.ispis();\n\t}\n\telse\n\t\tstd::cout << \"Nista nece da radi\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog16_6()","kod":"{\n\tFile_16C f6( \"osobe.inf\" );\n\tf6.read_info_o_osobi();\n\tf6.ispis_osoba();\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog17_2__1()","kod":"{\n\tstd::cout << \"2x2:\\n\";\n\tstd::array<std::array<int, 2>, 2> matrix = { { {{ 2, 1 }},\n\t\t\t\t\t\t\t\t\t\t\t\t{{ 1, 1 }} } };\n\tmatrixMultiply( matrix );\n\tfor( int i = 0; i < 2; ++i )\n\t{\n\t\tfor( int j = 0; j < 2; ++j )\n\t\t\tstd::cout << matrix[i][j] << \" \";\n\n\t\tstd::cout << \"\\n\";\n\t}\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog17_2__2()","kod":"{\n\tstd::array<std::array<int, 3>, 3> matrix = { {{{ 2, 1, 1 }},\n\t\t\t\t\t\t\t\t\t\t\t   {{ 2, 2, 2 }},\n\t\t\t\t\t\t\t\t\t\t\t   {{ 2, 1, 1 }}} };\n\tmatrixMultiply( matrix, 5 );\n\tfor( int i = 0; i < 3; ++i )\n\t{\n\t\tfor( int j = 0; j < 3; ++j )\n\t\t\tstd::cout << matrix[i][j] << \" \";\n\n\t\tstd::cout << \"\\n\";\n\t}\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog17_2__3()","kod":"{\n\tstd::cout << \"vec2x2:\\n\";\n\tsize_t x = 3;\n\tsize_t y = 2;\n\n\tint niz[6] = { 2, 1, 1,\n\t\t\t\t  1, 1, 1 };\n\n\tstd::vector<int> matricaRez = matrixMultiply( matrica_t{ x, y, niz }, matrica_t{ y, x, niz } );\n\tfor( int i = 0; i < y; ++i )\n\t{\n\t\tfor( int j = 0; j < y; ++j )\n\t\t\tstd::cout << matricaRez[i * y + j] << \" \";\n\n\t\tstd::cout << \"\\n\";\n\t}\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog17_5()","kod":"{\n\tchar str[] = \"tesaaaaaaaat\\0\";\n\tchar noviStr[10];\n\tmoj_memcpy( str, noviStr, 10 );\n\tstd::cout << \"novi string: \" << noviStr << '\\n';\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog18_1()","kod":"{\n\tRazlomak raz1( 1, 3, '+' );\n\tRazlomak raz2( 3, 8, '=' );\n\tRazlomak rezultat = raz1 + raz2;\n\tstd::cout << raz1 << raz2 << rezultat;\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog18_2()","kod":"{\n\tDecimal dec;\n\tdec.setBase( 500000 );\n\tdec.setDecimal( -15 );\n\tstd::cout << dec << '\\n';\n\tdec.setBase( 16 );\n\tdec.setDecimal( 32 );\n\tstd::cout << dec;\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog18_4()","kod":"{\n\tTime t1( 0, 0, 59, 0 );\n\tTime t2( 0, 25, 3, 1 );\n\tTime t3 = t1 - t2;\n\tstd::cout << \"  \" << t1\n\t\t<< \"- \" << t2\n\t\t<< \"----------------------\\n\"\n\t\t<< t3;\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog19_1()","kod":"{\n\tStringDouble sd1( \"5.55\" );\n\tStringDouble sd2( \"2\" );\n\tstd::cout << sd1 << \"+ \" << sd2 << \"= \" << sd1 + sd2 << '\\n'\n\t\t<< sd1 << \"- \" << sd2 << \"= \" << sd1 - sd2 << '\\n'\n\t\t<< sd1 << \"* \" << sd2 << \"= \" << sd1 * sd2 << '\\n'\n\t\t<< sd1 << \"/ \" << sd2 << \"= \" << sd1 / sd2 << '\\n';\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog21_1()","kod":"{\n\tCheckbook* cb = new Checkbook;\n\tcb->total();\n\tcb->addItem( 1 );\n\tcb->addItem( 2 );\n\tcb->addItem( 3 );\n\tcb->addItem( 4 );\n\tcb->addItem( 5 );\n\tcb->addItem( 6 );\n\tcb->addItem( 7 );\n\t//cb->addItem( 8 );\n\t//cb->addItem( 9 );\n\t//cb->addItem( 10 );\n\t//cb->addItem( 11 );\n\t//cb->addItem( 12 );\n\t//cb->addItem( 13 );\n\t//cb->addItem( 14 );\n\tstd::array<int, 10> items = static_cast<Queue*>( cb )->get10();\n\tfor( const auto& item : items )\n\t\tstd::cout << item << \"\\n\";\n\tdelete cb;\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog21_2()","kod":"{\n\tWord_match wm;\n\td_Number_mather nm;\n\td_BlankStr_matcher bsm;\n\tstd::cout << \"Word_match: 43, was: \" << wm.match( \"43\" ) << wm.match( \"was\" )\n\t\t<< \"\\nNumber_match 43, was: \" << nm.match( \"43\" ) << nm.match( \"was\" )\n\t\t<< \"\\nBlankStr_match 43,  , was: \" << bsm.match( \"43\" ) << bsm.match( \"  \" ) << bsm.match( \"was\" );\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog21_3()","kod":"{\n\td_Krug krug( 4 );\n\td_Kvadrat kvad( 4 );\n\td_Trokut trok( 4, 4 );\n\tstd::cout << \"Krug: \" << krug.v_povrsina()\n\t\t<< \"\\nKvad: \" << kvad.v_povrsina()\n\t\t<< \"\\nTrok: \" << trok.v_povrsina() << \"\\n\";\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog21_5()","kod":"{\n\td_Dek dek( 42 );\n\td_Okt okt( 8 );\n\td_Hex hex( 16 );\n\tdek.print_it();\n\tokt.print_it();\n\thex.print_it();\n\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog22_4()","kod":"{\n\tcount_letter( \"HelloWorld\" );\n\tcount_letter( \"Hello World\" );\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog23_1()","kod":"{\n\tPageFormatting pf;\n\tstd::string input;\n\tinput.reserve( 32 );\n\tstd::cout << \"Unesi ime datoteke: \";\n\tstd::getline( std::cin, input );\n\tpf.open_file( input.c_str() );\n\tstd::cout << \"Unesi naslov datoteke: \";\n\tstd::getline( std::cin, input );\n\tpf.page();\n\n\tpf.define_header( input.c_str() );\n\tpf.define_header( input.c_str() );\n\tstd::cout << \"Unesi tekst:\\n\";\n\tstd::getline( std::cin, input );\n\tpf.print_line( input.c_str() );\n\tpf.print_line( input.c_str() );\n\tpf.page();\n\tpf.print_line( input.c_str() );\n\tpf.print_line( input.c_str() );\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog23_2()","kod":"{\n\tstd::array<const char*, 5> imenaDatoteka = { {{\"Time.cpp\"}, {\"test\"}, {\"aaaaaaa\"}, {\"raznoMain.cpp\"}, {\"razno.hpp\"} } };\n\tstd::fstream datoteka = search_open( imenaDatoteka );\n\tstd::string stream;\n\tstream.reserve( 256 );\n\tif( datoteka.is_open() )\n\t{\n\t\twhile( std::getline( datoteka, stream ) )\n\t\t{\n\t\t\tstd::cout << stream << '\\n';\n\t\t}\n\t}\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog23_3()","kod":"{\n\tSymbolTable st;\n\tst.enter( \"test\" );\n\tst.enter( \"test\" );\n\tst.enter( \"test2\" );\n\tst.enter( \"test\" );\n\tstd::cout << ( st.lookup( \"test\" ) ? \"Nasao sam test\\n\" : \"Nema ga :(\\n\" );\n\tst.remove( \"test\" );\n\n\tstd::cout << ( st.lookup( \"test\" ) ? \"Nasao sam test\\n\" : \"Nema ga :(\\n\" );\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog24_1()","kod":"{\n\tstd::cout << \"min(2, 5): \" << min( 2, 5 )\n\t\t<< \"\\nmin(2.5, 1.05): \" << min( 2.5, 1.05 )\n\t\t<< \"\\nmin('a', 'A'): \" << min( 'a', 'A' )\n\t\t<< \"\\nmin(\\\"aA\\\", \\\"Aa\\\"): \" << min( \"aA\\0\", \"Aa\\0\" ) << '\\n';\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog26_1()","kod":"{\n\tstd::string imeDatoteke{};\n\tstd::cout << \"Unesi ime datoteke: \";\n\tstd::cin >> imeDatoteke; // npr. raznoMain.cpp\n\tstd::cout << haveDoubleWords( imeDatoteke );\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog26_3()","kod":"{\n\tMail_label test( \"7\", \"t\", \"e\", \"S\", \"t\" );\n\tMail_label test2( \"6\", \"t\", \"e\", \"S\", \"t\" );\n\tMail_label test3( \"2\", \"t\", \"e\", \"S\", \"t\" );\n\tMail_label test4;\n\tstd::cin >> test4;\n\tList* head = new List( test );\n\tList* el2 = new List( test2 );\n\tList* el3 = new List( test3 );\n\tList* el4 = new List( test4 );\n\thead->insert( el2 );\n\tel2->insert( el3 );\n\tel3->insert( el4 );\n\tstd::cout << \"HEAD:\\n\" << head->getContent()\n\t\t<< \"EL2:\\n\" << el2->getContent()\n\t\t<< \"EL3:\\n\" << el3->getContent()\n\t\t<< \"EL4:\\n\" << el4->getContent();\n\tList::sortByID( head );\n\tstd::cout << \"\\nSORTED!\\nHEAD:\\n\" << head->getContent()\n\t\t<< \"EL2:\\n\" << head->gotoNext()->getContent()\n\t\t<< \"EL3:\\n\" << head->gotoNext()->gotoNext()->getContent()\n\t\t<< \"EL4:\\n\" << head->gotoNext()->gotoNext()->gotoNext()->getContent();\n}","tekst":""},{"deklaracija":"void PracticalCppProg::pog26_5()","kod":"{\n\tconst std::string ime = \"raznoMain.cpp\";\n\tstd::fstream datoteka;\n\tispisi_datoteku_u_konzolu( datoteka, ime );\n}","tekst":""}]}}],"pathToProj":"_Projekti\\razno"}},{"ThinkLAP":{"Broj cjeline":[{"ThinkLAP":{"Zadaci":[{"deklaracija":"void ThinkLAP::printSidewaysTriangle()","kod":"{\n\tPoglavlje2 pog2;\n\tpog2.printSidewaysTriangle();\n\tpog2.printSidewaysTriangleRec();\n}","tekst":""},{"deklaracija":"void ThinkLAP::luhnFormulaPrecomputed_and_Expression()","kod":"{\n\tPoglavlje2 pog2;\n\tpog2.luhnFormulaPrecomputed();\n\tpog2.luhnFormulaExpression();\n}","tekst":""},{"deklaracija":"void ThinkLAP::decodeMessage()","kod":"{\n\tPoglavlje2 pog2;\n\tpog2.decodeMessage();\n\tstd::cout << \"\\nRjesenje:\\n\";\n\tpog2.decodeMessageRjesenje();\n\n\t// slova\n\t// -      -> promijeni mod\n\t// ' '    -> razmak\n\t//\n\t//\t\t  R, -\t, i , g ,  h  , t  , -, ? ,' ', -, Y ,-, e,  s  , -, !\n\t// input: 18,12312,171,763,98423,1208,216,11,500,18,241,0,32,20620,27,10\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj1()","kod":"{\n\tPoglavlje2 pog2;\n\tpog2.vj1();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj2()","kod":"{\n\tPoglavlje2 pog2;\n\tpog2.vj2();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj2version2()","kod":"{\n\tPoglavlje2 pog2;\n\tpog2.vj2_version2();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj3()","kod":"{\n\tPoglavlje2 pog2;\n\t//// input: 9780306406157 (978-0-306-40615-7)\n\tpog2.vj3();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj5_check()","kod":"{\n\tPoglavlje2 pog2;\n\tpog2.vj5_check();\n\t//// input: 978030640615 (978-0-306-40615-?)\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj5_generate()","kod":"{\n\tPoglavlje2 pog2;\n\tpog2.vj5_generate();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj6()","kod":"{\n\ttry\n\t{\n\t\tPoglavlje2 pog2;\n\t\tstd::cout << pog2.vj6_bin_to_dec() << '\\n';\n\t}\n\tcatch( const char* poruka )\n\t{\n\t\tstd::cout << poruka;\n\t}\n\tcatch( ... )\n\t{\n\t\tstd::cout << \"--GRESKA!--\\n\";\n\t}\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj6_2()","kod":"{\n\tPoglavlje2 pog2;\n\tint bin = pog2.vj6_dec_to_bin();\n\tpog2.vj6_ispisi_bin( bin );\n\t////std::cout << bin;\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj7()","kod":"{\n\tstruct testCase\n\t{\t\t\t\t\t\t\t// b\t\t\t\t\t\t\t\t\td\t\t\t\th\n\t\tint test1 = 0;\t\t\t// 0\t\t\t\t\t\t\t\t\t0\t\t\t\t0x0\n\t\tint test2 = 5;\t\t\t// 101\t\t\t\t\t\t\t\t5\t\t\t\t0x5\n\t\tint test3 = -5;\t\t\t// 11111111111111111111111111111011\t\t-5\t\t\t\t0xFFFC\n\t\tint test4 = INT32_MIN;\t// 10000000000000000000000000000000\t\t-2147483648\t\t0x8000\n\t};\n\n\tPoglavlje2 pog2;\n\tpog2.vj7_pretvorba_sa_hex();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj8()","kod":"{\n\tPoglavlje2 pog2;\n////--------------------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>(neg brojevi)\n\tpog2.vj8_pretvorba_sve_baze();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog2vj9()","kod":"{\n\t//test cases :\n\t//rE,\n\t//Ree,\n\t//aaaaaa Uhhhhh,\n\t//bbboKKK,\n\n\tPoglavlje2 pog2;\n\tstd::string str;\n\tstd::cout << \"Unesi liniju teksta:\\n\";\n\tgetline( std::cin, str );\n\tpog2.vj9_unos_string_info( str );\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog3_finding_the_mode()","kod":"{\n\tPoglavlje3 pog3;\n\tpog3.finding_the_mode();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog3_vj1_sorting()","kod":"{\n\tPoglavlje3 pog3;\n\tpog3.vj1_sorting();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog3_highestSales_zadano()","kod":"{\n\tPoglavlje3 pog3;\n\tpog3.highestSales_zadano();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog3_vj2_median()","kod":"{\n\tPoglavlje3 pog3;\n\tpog3.vj2_median();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog3_vj3_issorted()","kod":"{\n\tPoglavlje3 pog3;\n\tstd::array<int, 20> niz1{ 5865, 5456, 3983, 6464, 9957, 4785, 3875, 3838, 4959, 1122, 7766, 2534, 23, 55, 67, 99, 265, 376, 232, 223 };\n\tstd::array<int, 20> niz2{ 23, 55, 67, 99, 223, 232, 265, 376, 1122, 2534, 3838, 3875, 3983, 4785, 4959, 5456, 5865, 6464,  7766, 9957 };\n\tstd::cout << \"niz1:\\n\";\n\tfor( const int el : niz1 )\tstd::cout << el << \" \"; std::cout << '\\n';\n\tstd::cout << ( ( pog3.vj3_issorted( niz1 ) == true ) ? \"sortiran\\n\" : \"nije sortiran\\n\" );\n\tstd::cout << \"\\nniz2:\\n\";\n\tfor( const int el : niz2 )\tstd::cout << el << \" \"; std::cout << '\\n';\n\tstd::cout << ( ( pog3.vj3_issorted( niz2 ) == true ) ? \"sortiran\\n\" : \"nije sortiran\\n\" );\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog3_vj4_encode_and_vj5_decode()","kod":"{\n\ttry\n\t{\n\t/// ( za trenutacni nacin kriptiranja znakova )\n\t/// cipher:\t\t┼ ( ? I ž 0 _ ) = E 5 ! ╣ < ' ╦ $ » ╩ 8 U ▀ ď Ó ─ ╝\n\t/// slova:\t\ta b c d e f g h i j k l m n o p q r s t u v w x y z\n\t\tPoglavlje3 pog3;\n\t\tconst char* plainText = \"roses are red, sky is blue. code is gud and so no need to be pulled.\";\n\t\tauto encoded = pog3.vj4_cipher_encode( plainText );\n\t\tstd::cout.setf( std::ios::left ); std::cout.width( 12 ); std::cout << \"plainText:\" << plainText << '\\n';\n\t\tstd::cout.setf( std::ios::left ); std::cout.width( 12 ); std::cout << \"encoded:\" << encoded << '\\n';\n\n\t\tstd::cout << \"\\nNakon dekriptiranja:\\n\";\n\n\t\tchar cipherText[57];\n\t\tstrcpy_s( cipherText, encoded.get() );\n\t\tauto decode = pog3.vj5_cipher_decode( std::move( encoded ) );\n\t\tstd::cout.setf( std::ios::left ); std::cout.width( 12 ); std::cout << \"cipherText:\" << cipherText << '\\n';\n\t\tstd::cout.setf( std::ios::left ); std::cout.width( 12 ); std::cout << \"decode:\" << decode << '\\n';\n\t}\n\tcatch( const char* str )\n\t{\n\t\tstd::cout << str;\n\t}\n\tcatch( ... )\n\t{\n\t\tstd::cout << \"--GRESKA--\\n\";\n\t}\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog3_vj8_grade_better_than()","kod":"{\n\tPoglavlje3 pog3;\n\tconst auto rezultati = pog3.vj8_grade_better_than();\n\tstd::cout << \"Od trazenog ucenika bolji je postotak studenata sa sljedecim ocjenama:\\n\"\n\t\t<< \"25%: \" << static_cast<uint8_t>( rezultati[0] != UINT8_MAX ? ( rezultati[0] + 'A' ) : '\\\\' ) << '\\n'\n\t\t<< \"50%: \" << static_cast<uint8_t>( rezultati[1] != UINT8_MAX ? ( rezultati[1] + 'A' ) : '\\\\' ) << '\\n'\n\t\t<< \"75%: \" << static_cast<uint8_t>( rezultati[2] != UINT8_MAX ? ( rezultati[2] + 'A' ) : '\\\\' ) << '\\n';\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog3_vj9_modified_median()","kod":"{\n\tPoglavlje3 pog3;\n\tpog3.vj9_modified_median();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_osnovne_operacije_stringa()","kod":"{\n\tPoglavlje4 pog4;\n\tconst char* string = \"\";\n\tstd::cout << \"string: \" << string;\n\tstd::cout << \"\\nAppendig \\\"a\\\"\\n\";\n\tpog4.append( string, 'a' );\n\tstd::cout << \"string: \" << string << '\\n';\n\tstd::cout << \"Concatenating \\\" test\\\"\\n\";\n\tpog4.concatenate( string, \" test\" );\n\tstd::cout << \"string: \" << string << '\\n';\n\tstd::cout << \"\\nAppendig \\\".\\\"\\n\";\n\tpog4.append( string, '.' );\n\tstd::cout << \"string: \" << string << '\\n';\n\tstd::cout << \"Concatenating \\\" This is\\\"\\n\";\n\tpog4.concatenate( string, \" This is.\" );\n\tstd::cout << \"string: \" << string << '\\n';\n\tstd::cout << \"\\n\";\n\tstd::cout << \"string sa characterAt funkcijom:\\n\";\n\tfor( std::pair<uint8_t, const char*> data = { 1, string }; *data.second != '\\0'; ++data.first, ++data.second )\n\t\tstd::cout << pog4.characterAt( string, data.first ) << '\\n';\n\tdelete[] string;\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_prosjek_ocjena_studenata()","kod":"{\n\tPoglavlje4 pog4;\n\tPoglavlje4::StudentRecord* record = nullptr;\n\tpog4.addRecord( record, { 1, 'A' } ); // 1\n\tpog4.addRecord( record, { 1, 'B' } ); // 2\n\tpog4.addRecord( record, { 1, 'C' } ); // 6\n\tpog4.addRecord( record, { 1, 'F' } ); // 6\n\tpog4.addRecord( record, { 3, 'C' } ); // 3\n\tpog4.addRecord( record, { 3, 'E' } ); // 5\n\tpog4.addRecord( record, { 3, 'E' } ); // 5\n\tpog4.addRecord( record, { 3, 'E' } ); // 5\n\tpog4.addRecord( record, { 3, 'E' } ); // 5\n\tstd::cout << \"Prosjek ocjena u rekordu je: \" << static_cast<char>( pog4.averageRecord( record ) ) << '\\n';\n\tdelete record;\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_vj1()","kod":"{\n\tPoglavlje4 pog4;\n\tpog4.vj1_(); ///////////////////////////////////////////////////////////////////////////////////////// TODO\tpogledaj za zadatak koji se moze rjesit sa dinamicnom memorijom\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_vj2_jos_operacija_nad_stringom()","kod":"{\n\tPoglavlje4 pog4;\n\tconst char* test1 = \"\\0\";\n\tconst char* sub1 = pog4.vj2_sub_string( test1, 0, 5 );\n\tconst char* sub2 = pog4.vj2_sub_string( test1, 5, 2 );\n\tconst char* sub3 = pog4.vj2_sub_string( test1, 0, 1 );\n\tstd::cout << \"test1: \\\"\" << sub1 << \"\\\"\" << \", \" << \"\\\"\" << sub2 << \"\\\"\" << \", \" << \"\\\"\" << sub3 << \"\\\"\\n\";\n\tconst char* test2 = \"test2\";\n\tconst char* sub4 = pog4.vj2_sub_string( test2, 0, 5 );\n\tconst char* sub5 = pog4.vj2_sub_string( test2, 3, 2 );\n\tconst char* sub6 = pog4.vj2_sub_string( test2, 0, 1 );\n\tconst char* sub7 = pog4.vj2_sub_string( test2, 4, 3 );\n\tconst char* sub8 = pog4.vj2_sub_string( test2, -1, 3 );\n\tstd::cout << \"test2: \\\"\" << sub4 << \"\\\"\" << \", \" << \"\\\"\" << sub5 << \"\\\"\" << \", \" << \"\\\"\" << sub6 << \"\\\"\" << \", \" << \"\\\"\" << sub7 << \"\\\"\" << \", \" << \"\\\"\" << sub8 << \"\\\"\\n\";\n\tdelete[] sub1, delete[] sub2, delete[] sub3, delete[] sub4, delete[] sub5, delete[] sub6, delete[] sub7, delete[] sub8;\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_myCharPtr_klasa_testiranje()","kod":"{\n\tPoglavlje4 pog4;\n\tPoglavlje4::myCharptr string1( 12, \"Konstruktor!\" ), string2( 14, \"Konstruktor2!a\" );\n\tstd::cout << \"string1: \" << string1 << '\\n';\n\tstd::cout << \"string2: \" << string2 << '\\n';\n\tPoglavlje4::myCharptr string3( string1 );\n\tstd::cout << \"string3(copy konstruktor string1): \" << string3 << \", string1: \" << string1 << '\\n';\n\tPoglavlje4::myCharptr string4( std::move( string2 ) );\n\tstd::cout << \"string4(move konstruktor string2): \" << string4 << '\\n';\n\tstd::cout << \"string2(nakon move): \" << string2 << '\\n';\n\tstring1 = string3;\n\tstd::cout << \"string1(nakon =string3): \" << string1 << \", string3: \" << string3 << '\\n';\n\tstring3 = std::move( string1 );\n\tstd::cout << \"string3 mov =string1: \" << string3 << \", string1: \" << string1 << '\\n';\n\t//////\n\tpog4.vj4_append( string1, 'a' ); pog4.vj4_append( string1, 'p' ); pog4.vj4_append( string1, 'p' ); pog4.vj4_append( string1, 'e' ); pog4.vj4_append( string1, 'n' ); pog4.vj4_append( string1, 'd' );\n\tpog4.vj4_concatenate( string2, \"concatenate\" );\n\tuint8_t len = std::max( { string1.getLength(), string2.getLength(), string3.getLength(), string4.getLength() } );\n\tfor( uint8_t i = 1; i <= len; ++i )\n\t\tstd::cout << pog4.vj4_characterAt( string1, i ) << '\\t' << pog4.vj4_characterAt( string2, i ) << '\\t' << pog4.vj4_characterAt( string3, i ) << '\\t' << pog4.vj4_characterAt( string4, i ) << '\\n' << '\\n';\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_vj4_dodavanje_and_vj5_uklananje_studentkih_rekorda()","kod":"{\n\tPoglavlje4 pog4;\n\tPoglavlje4::StudentRecord* record = nullptr;\n\tpog4.addRecord( record, { 1, 'A' } ); // 1\n\tpog4.addRecord( record, { 1, 'B' } ); // 2\n\tpog4.addRecord( record, { 1, 'C' } ); // 6\n\tchar kriterij;\n\tuint8_t mode;\n\tstd::cout << \"Unesi po kojem kriteriju zelis uklonit iz rekorda: \";\n\tstd::cin >> kriterij;\t// 1\n\tstd::cout << \"Unesi koji mode zelis(0-> ID, 1-> ocjena): \";\n\tstd::cin >> mode;\t// 0\n\tpog4.vj5_remove_record( record, kriterij, mode );\n\tstd::cout << \"Unesi po kojem kriteriju zelis uklonit iz rekorda: \";\n\tstd::cin >> kriterij;\t// 'C'\n\tstd::cout << \"Unesi koji mode zelis(0-> ID, 1-> ocjena): \";\n\tstd::cin >> mode;\t// 1\n\tpog4.vj5_remove_record( record, kriterij, mode );\n\tstd::cout << \"Unesi po kojem kriteriju zelis uklonit iz rekorda: \";\n\tstd::cin >> kriterij;\t// 'A'\n\tstd::cout << \"Unesi koji mode zelis(0-> ID, 1-> ocjena): \";\n\tstd::cin >> mode;\t// 1\n\tpog4.vj5_remove_record( record, kriterij, mode );\n\tdelete record;\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_vj6()","kod":"{\n\tstruct StringLLAdv advNode = testVal1();\n\tstd::cout << \"nakon append advNode:\\n\";\n\tfor( int i = 0; i < advNode.head.slovo; ++i )\n\t\tstd::cout << StringLinkedList::vj6_characterAt( advNode, i ) << '\\n';\n\tStringLinkedList::del( advNode );\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_vj7()","kod":"{\n\tStringLLAdv advNode = testVal1();\n\tStringLLAdv advNode2 = testVal2();\n\tStringLinkedList::vj7_concatenate( advNode, advNode2 );\n\tstd::cout << \"\\nnakon contatenate advNode:\\n\";\n\tfor( int i = 0; i < advNode.head.slovo; ++i )\n\t\tstd::cout << StringLinkedList::vj6_characterAt( advNode, i ) << '\\n';\n\tStringLinkedList::del( advNode );\n\tStringLinkedList::del( advNode2 );\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_vj8()","kod":"{\n\tStringLLAdv advNode = testVal1();\n\tStringLLAdv advNode2 = testVal2();\n\tStringLinkedList::vj7_concatenate( advNode, advNode2 );\n\tstd::cout << \"\\nnakon contatenate advNode:\\n\";\n\tStringLinkedList::vj8_rmvchar( advNode, 5, 3 );\n\tstd::cout << \"\\nnakon rmvchar advNode:\\n\";\n\tfor( int i = 0; i < advNode.head.slovo; ++i )\n\t\tstd::cout << StringLinkedList::vj6_characterAt( advNode, i ) << '\\n';\n\tStringLinkedList::vj8_rmvchar( advNode, 0, 2 );\n\tstd::cout << \"\\nnakon rmvchar advNode:\\n\";\n\tfor( int i = 0; i < advNode.head.slovo; ++i )\n\t\tstd::cout << StringLinkedList::vj6_characterAt( advNode, i ) << '\\n';\n\tStringLinkedList::vj8_rmvchar( advNode2, 1, 3 );\n\tstd::cout << \"\\nnakon rmvchar advNode2:\\n\";\n\tfor( int i = 0; i < advNode2.head.slovo; ++i )\n\t\tstd::cout << StringLinkedList::vj6_characterAt( advNode2, i ) << '\\n';\n\tStringLinkedList::vj8_rmvchar( advNode2, 0, 1 );\n\tstd::cout << \"\\nnakon rmvchar advNode2:\\n\";\n\tfor( int i = 0; i < advNode2.head.slovo; ++i )\n\t\tstd::cout << StringLinkedList::vj6_characterAt( advNode2, i ) << '\\n';\n\tStringLinkedList::del( advNode );\n\tStringLinkedList::del( advNode2 );\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_vj9()","kod":"{\n//inp: 12233344445555566666677777778888888899999999910101010101010101010\n\tstd::cout << \"Unesi bilo koji pozitivan broj: \";\n\tStringLLAdv advNode = StringLinkedList::vj9_intToList();\n\tstd::cout.width( 33 );  std::cout.setf( std::ios::left ); std::cout << \"\\nBroj unutar advNode: \";\n\tfor( int i = 0; i < advNode.head.slovo; ++i )\n\t\tstd::cout << StringLinkedList::vj6_characterAt( advNode, i );\n\tStringLinkedList::del( advNode );\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog4_vj10()","kod":"{\n\tstd::cout << \"Unesi bilo koji pozitivan broj: \";\n\tStringLLAdv advNode = StringLinkedList::vj9_intToList();\n\tstd::cout << \"\\nUnesi bilo koji pozitivan broj: \";\n\tStringLLAdv advNode2 = StringLinkedList::vj9_intToList();\n\tstd::cout << \"\\nadvNode + advNode2 = \";\n\tStringLLAdv advNodeRez = StringLinkedList::vj10_add_2_int_lists( advNode, advNode2 );\n\tfor( int i = 0; i < advNodeRez.head.slovo; ++i )\n\t\tstd::cout << StringLinkedList::vj6_characterAt( advNodeRez, i );\n\tStringLinkedList::del( advNode );\n\tStringLinkedList::del( advNode2 );\n\tStringLinkedList::del( advNodeRez );\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog5_vj1()","kod":"{\n\tPoglavlje5 pog5;\n\tpog5.vj_studentRecords();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog5_zad1()","kod":"{\n\tPoglavlje5 pog5;\n\tpog5.zad1_printCarInfo();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog5_zad2()","kod":"{\n\tPoglavlje5 pog5;\n\tpog5.zad2_printCarsAge();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog5_zad3_i_4()","kod":"{\n\tPoglavlje5 pog5;\n\tpog5.zad3i4_myCharPtr_class();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog5_zad5()","kod":"{\n\tPoglavlje5 pog5;\n\tpog5.zad5_remove();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_vj1()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.vj1_parrots();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_vj2()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.vj2_salary();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_vj3()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.vj3_sum();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_vj4()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.vj4_count_negative_numbers();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_vj5()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.vj5_biggest_num_tree();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_zad1()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.zad1_sum_of_positive_numbers();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_zad2()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.zad2_binary_str_even_odd();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_zad3()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.zad3_target_appeard();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_zad4()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.zad4_tree_is_heap();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_zad5()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.zad5_is_binary_search_tree();\n}","tekst":""},{"deklaracija":"void ThinkLAP::pog6_zad6()","kod":"{\n\tPoglavlje6 pog6;\n\tpog6.zad6_insert_value_in_binary_search_tree();\n}","tekst":""}]}}],"pathToProj":"_Projekti\\ThinkLAP"}}]}